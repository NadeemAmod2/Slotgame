{"version":3,"file":"pixi-filters.js","sources":["../../filters/adjustment/lib/filter-adjustment.esm.js","../../filters/kawase-blur/lib/filter-kawase-blur.esm.js","../../filters/advanced-bloom/lib/filter-advanced-bloom.esm.js","../../filters/ascii/lib/filter-ascii.esm.js","../../filters/bevel/lib/filter-bevel.esm.js","../../filters/bloom/lib/filter-bloom.esm.js","../../filters/bulge-pinch/lib/filter-bulge-pinch.esm.js","../../filters/color-map/lib/filter-color-map.esm.js","../../filters/color-replace/lib/filter-color-replace.esm.js","../../filters/convolution/lib/filter-convolution.esm.js","../../filters/cross-hatch/lib/filter-cross-hatch.esm.js","../../filters/crt/lib/filter-crt.esm.js","../../filters/dot/lib/filter-dot.esm.js","../../filters/drop-shadow/lib/filter-drop-shadow.esm.js","../../filters/emboss/lib/filter-emboss.esm.js","../../filters/glitch/lib/filter-glitch.esm.js","../../filters/glow/lib/filter-glow.esm.js","../../filters/godray/lib/filter-godray.esm.js","../../filters/motion-blur/lib/filter-motion-blur.esm.js","../../filters/multi-color-replace/lib/filter-multi-color-replace.esm.js","../../filters/old-film/lib/filter-old-film.esm.js","../../filters/outline/lib/filter-outline.esm.js","../../filters/pixelate/lib/filter-pixelate.esm.js","../../filters/radial-blur/lib/filter-radial-blur.esm.js","../../filters/reflection/lib/filter-reflection.esm.js","../../filters/rgb-split/lib/filter-rgb-split.esm.js","../../filters/shockwave/lib/filter-shockwave.esm.js","../../filters/simple-lightmap/lib/filter-simple-lightmap.esm.js","../../filters/tilt-shift/lib/filter-tilt-shift.esm.js","../../filters/twist/lib/filter-twist.esm.js","../../filters/zoom-blur/lib/filter-zoom-blur.esm.js"],"sourcesContent":["/*!\n * @pixi/filter-adjustment - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-adjustment is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"varying vec2 vTextureCoord;\\nuniform sampler2D uSampler;\\n\\nuniform float gamma;\\nuniform float contrast;\\nuniform float saturation;\\nuniform float brightness;\\nuniform float red;\\nuniform float green;\\nuniform float blue;\\nuniform float alpha;\\n\\nvoid main(void)\\n{\\n    vec4 c = texture2D(uSampler, vTextureCoord);\\n\\n    if (c.a > 0.0) {\\n        c.rgb /= c.a;\\n\\n        vec3 rgb = pow(c.rgb, vec3(1. / gamma));\\n        rgb = mix(vec3(.5), mix(vec3(dot(vec3(.2125, .7154, .0721), rgb)), rgb, saturation), contrast);\\n        rgb.r *= red;\\n        rgb.g *= green;\\n        rgb.b *= blue;\\n        c.rgb = rgb * brightness;\\n\\n        c.rgb *= c.a;\\n    }\\n\\n    gl_FragColor = c * alpha;\\n}\\n\";\n\n/**\n * The ability to adjust gamma, contrast, saturation, brightness, alpha or color-channel shift. This is a faster\n * and much simpler to use than {@link http://pixijs.download/release/docs/PIXI.filters.ColorMatrixFilter.html ColorMatrixFilter}\n * because it does not use a matrix.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/adjustment.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-adjustment|@pixi/filter-adjustment}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n *\n * @param {object|number} [options] - The optional parameters of the filter.\n * @param {number} [options.gamma=1] - The amount of luminance\n * @param {number} [options.saturation=1] - The amount of color saturation\n * @param {number} [options.contrast=1] - The amount of contrast\n * @param {number} [options.brightness=1] - The overall brightness\n * @param {number} [options.red=1] - The multipled red channel\n * @param {number} [options.green=1] - The multipled green channel\n * @param {number} [options.blue=1] - The multipled blue channel\n * @param {number} [options.alpha=1] - The overall alpha amount\n */\nvar AdjustmentFilter = /*@__PURE__*/(function (Filter) {\n    function AdjustmentFilter(options) {\n        Filter.call(this, vertex, fragment);\n\n        Object.assign(this, {\n            /**\n             * The amount of luminance\n             * @member {number}\n             * @memberof PIXI.filters.AdjustmentFilter#\n             * @default 1\n             */\n            gamma: 1,\n\n            /**\n             * The amount of saturation\n             * @member {number}\n             * @memberof PIXI.filters.AdjustmentFilter#\n             * @default 1\n             */\n            saturation: 1,\n\n            /**\n             * The amount of contrast\n             * @member {number}\n             * @memberof PIXI.filters.AdjustmentFilter#\n             * @default 1\n             */\n            contrast: 1,\n\n            /**\n             * The amount of brightness\n             * @member {number}\n             * @memberof PIXI.filters.AdjustmentFilter#\n             * @default 1\n             */\n            brightness: 1,\n\n            /**\n             * The amount of red channel\n             * @member {number}\n             * @memberof PIXI.filters.AdjustmentFilter#\n             * @default 1\n             */\n            red: 1,\n\n            /**\n             * The amount of green channel\n             * @member {number}\n             * @memberof PIXI.filters.AdjustmentFilter#\n             * @default 1\n             */\n            green: 1,\n\n            /**\n             * The amount of blue channel\n             * @member {number}\n             * @memberof PIXI.filters.AdjustmentFilter#\n             * @default 1\n             */\n            blue: 1,\n\n            /**\n             * The amount of alpha channel\n             * @member {number}\n             * @memberof PIXI.filters.AdjustmentFilter#\n             * @default 1\n             */\n            alpha: 1,\n        }, options);\n    }\n\n    if ( Filter ) AdjustmentFilter.__proto__ = Filter;\n    AdjustmentFilter.prototype = Object.create( Filter && Filter.prototype );\n    AdjustmentFilter.prototype.constructor = AdjustmentFilter;\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    AdjustmentFilter.prototype.apply = function apply (filterManager, input, output, clear) {\n        this.uniforms.gamma = Math.max(this.gamma, 0.0001);\n        this.uniforms.saturation = this.saturation;\n        this.uniforms.contrast = this.contrast;\n        this.uniforms.brightness = this.brightness;\n        this.uniforms.red = this.red;\n        this.uniforms.green = this.green;\n        this.uniforms.blue = this.blue;\n        this.uniforms.alpha = this.alpha;\n\n        filterManager.applyFilter(this, input, output, clear);\n    };\n\n    return AdjustmentFilter;\n}(Filter));\n\nexport { AdjustmentFilter };\n//# sourceMappingURL=filter-adjustment.esm.js.map\n","/*!\n * @pixi/filter-kawase-blur - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-kawase-blur is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\nimport { Point } from '@pixi/math';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"\\nvarying vec2 vTextureCoord;\\nuniform sampler2D uSampler;\\n\\nuniform vec2 uOffset;\\n\\nvoid main(void)\\n{\\n    vec4 color = vec4(0.0);\\n\\n    // Sample top left pixel\\n    color += texture2D(uSampler, vec2(vTextureCoord.x - uOffset.x, vTextureCoord.y + uOffset.y));\\n\\n    // Sample top right pixel\\n    color += texture2D(uSampler, vec2(vTextureCoord.x + uOffset.x, vTextureCoord.y + uOffset.y));\\n\\n    // Sample bottom right pixel\\n    color += texture2D(uSampler, vec2(vTextureCoord.x + uOffset.x, vTextureCoord.y - uOffset.y));\\n\\n    // Sample bottom left pixel\\n    color += texture2D(uSampler, vec2(vTextureCoord.x - uOffset.x, vTextureCoord.y - uOffset.y));\\n\\n    // Average\\n    color *= 0.25;\\n\\n    gl_FragColor = color;\\n}\";\n\nvar fragmentClamp = \"\\nvarying vec2 vTextureCoord;\\nuniform sampler2D uSampler;\\n\\nuniform vec2 uOffset;\\nuniform vec4 filterClamp;\\n\\nvoid main(void)\\n{\\n    vec4 color = vec4(0.0);\\n\\n    // Sample top left pixel\\n    color += texture2D(uSampler, clamp(vec2(vTextureCoord.x - uOffset.x, vTextureCoord.y + uOffset.y), filterClamp.xy, filterClamp.zw));\\n\\n    // Sample top right pixel\\n    color += texture2D(uSampler, clamp(vec2(vTextureCoord.x + uOffset.x, vTextureCoord.y + uOffset.y), filterClamp.xy, filterClamp.zw));\\n\\n    // Sample bottom right pixel\\n    color += texture2D(uSampler, clamp(vec2(vTextureCoord.x + uOffset.x, vTextureCoord.y - uOffset.y), filterClamp.xy, filterClamp.zw));\\n\\n    // Sample bottom left pixel\\n    color += texture2D(uSampler, clamp(vec2(vTextureCoord.x - uOffset.x, vTextureCoord.y - uOffset.y), filterClamp.xy, filterClamp.zw));\\n\\n    // Average\\n    color *= 0.25;\\n\\n    gl_FragColor = color;\\n}\\n\";\n\n/**\n * A much faster blur than Gaussian blur, but more complicated to use.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/kawase-blur.png)\n *\n * @see https://software.intel.com/en-us/blogs/2014/07/15/an-investigation-of-fast-real-time-gpu-based-image-blur-algorithms\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-kawase-blur|@pixi/filter-kawase-blur}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {number|number[]} [blur=4] - The blur of the filter. Should be greater than `0`. If\n *        value is an Array, setting kernels.\n * @param {number} [quality=3] - The quality of the filter. Should be an integer greater than `1`.\n * @param {boolean} [clamp=false] - Clamp edges, useful for removing dark edges\n *        from fullscreen filters or bleeding to the edge of filterArea.\n */\nvar KawaseBlurFilter = /*@__PURE__*/(function (Filter) {\n    function KawaseBlurFilter(blur, quality, clamp) {\n        if ( blur === void 0 ) blur = 4;\n        if ( quality === void 0 ) quality = 3;\n        if ( clamp === void 0 ) clamp = false;\n\n        Filter.call(this, vertex, clamp ? fragmentClamp : fragment);\n        this.uniforms.uOffset = new Float32Array(2);\n\n        this._pixelSize = new Point();\n        this.pixelSize = 1;\n        this._clamp = clamp;\n        this._kernels = null;\n\n        // if `blur` is array , as kernels\n        if (Array.isArray(blur)) {\n            this.kernels = blur;\n        }\n        else {\n            this._blur = blur;\n            this.quality = quality;\n        }\n    }\n\n    if ( Filter ) KawaseBlurFilter.__proto__ = Filter;\n    KawaseBlurFilter.prototype = Object.create( Filter && Filter.prototype );\n    KawaseBlurFilter.prototype.constructor = KawaseBlurFilter;\n\n    var prototypeAccessors = { kernels: { configurable: true },clamp: { configurable: true },pixelSize: { configurable: true },quality: { configurable: true },blur: { configurable: true } };\n\n    /**\n     * Overrides apply\n     * @private\n     */\n    KawaseBlurFilter.prototype.apply = function apply (filterManager, input, output, clear) {\n        var uvX = this.pixelSize.x / input._frame.width;\n        var uvY = this.pixelSize.y / input._frame.height;\n        var offset;\n\n        if (this._quality === 1 || this._blur === 0) {\n            offset = this._kernels[0] + 0.5;\n            this.uniforms.uOffset[0] = offset * uvX;\n            this.uniforms.uOffset[1] = offset * uvY;\n            filterManager.applyFilter(this, input, output, clear);\n        }\n        else {\n            var renderTarget = filterManager.getFilterTexture();\n\n            var source = input;\n            var target = renderTarget;\n            var tmp;\n\n            var last = this._quality - 1;\n\n            for (var i = 0; i < last; i++) {\n                offset = this._kernels[i] + 0.5;\n                this.uniforms.uOffset[0] = offset * uvX;\n                this.uniforms.uOffset[1] = offset * uvY;\n                filterManager.applyFilter(this, source, target, true);\n\n                tmp = source;\n                source = target;\n                target = tmp;\n            }\n            offset = this._kernels[last] + 0.5;\n            this.uniforms.uOffset[0] = offset * uvX;\n            this.uniforms.uOffset[1] = offset * uvY;\n            filterManager.applyFilter(this, source, output, clear);\n\n            filterManager.returnFilterTexture(renderTarget);\n        }\n    };\n\n    /**\n     * Auto generate kernels by blur & quality\n     * @private\n     */\n    KawaseBlurFilter.prototype._generateKernels = function _generateKernels () {\n        var blur = this._blur;\n        var quality = this._quality;\n        var kernels = [ blur ];\n\n        if (blur > 0) {\n            var k = blur;\n            var step = blur / quality;\n\n            for (var i = 1; i < quality; i++) {\n                k -= step;\n                kernels.push(k);\n            }\n        }\n\n        this._kernels = kernels;\n    };\n\n    /**\n     * The kernel size of the blur filter, for advanced usage.\n     *\n     * @member {number[]}\n     * @default [0]\n     */\n    prototypeAccessors.kernels.get = function () {\n        return this._kernels;\n    };\n    prototypeAccessors.kernels.set = function (value) {\n        if (Array.isArray(value) && value.length > 0) {\n            this._kernels = value;\n            this._quality = value.length;\n            this._blur = Math.max.apply(Math, value);\n        }\n        else {\n            // if value is invalid , set default value\n            this._kernels = [0];\n            this._quality = 1;\n        }\n    };\n\n    /**\n     * Get the if the filter is clampped.\n     *\n     * @readonly\n     * @member {boolean}\n     * @default false\n     */\n    prototypeAccessors.clamp.get = function () {\n        return this._clamp;\n    };\n\n    /**\n     * Sets the pixel size of the filter. Large size is blurrier. For advanced usage.\n     *\n     * @member {PIXI.Point|number[]}\n     * @default [1, 1]\n     */\n    prototypeAccessors.pixelSize.set = function (value) {\n        if (typeof value === 'number') {\n            this._pixelSize.x = value;\n            this._pixelSize.y = value;\n        }\n        else if (Array.isArray(value)) {\n            this._pixelSize.x = value[0];\n            this._pixelSize.y = value[1];\n        }\n        else if (value instanceof Point) {\n            this._pixelSize.x = value.x;\n            this._pixelSize.y = value.y;\n        }\n        else {\n            // if value is invalid , set default value\n            this._pixelSize.x = 1;\n            this._pixelSize.y = 1;\n        }\n    };\n    prototypeAccessors.pixelSize.get = function () {\n        return this._pixelSize;\n    };\n\n    /**\n     * The quality of the filter, integer greater than `1`.\n     *\n     * @member {number}\n     * @default 3\n     */\n    prototypeAccessors.quality.get = function () {\n        return this._quality;\n    };\n    prototypeAccessors.quality.set = function (value) {\n        this._quality = Math.max(1, Math.round(value));\n        this._generateKernels();\n    };\n\n    /**\n     * The amount of blur, value greater than `0`.\n     *\n     * @member {number}\n     * @default 4\n     */\n    prototypeAccessors.blur.get = function () {\n        return this._blur;\n    };\n    prototypeAccessors.blur.set = function (value) {\n        this._blur = value;\n        this._generateKernels();\n    };\n\n    Object.defineProperties( KawaseBlurFilter.prototype, prototypeAccessors );\n\n    return KawaseBlurFilter;\n}(Filter));\n\nexport { KawaseBlurFilter };\n//# sourceMappingURL=filter-kawase-blur.esm.js.map\n","/*!\n * @pixi/filter-advanced-bloom - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-advanced-bloom is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\nimport { KawaseBlurFilter } from '@pixi/filter-kawase-blur';\nimport { settings } from '@pixi/settings';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"\\nuniform sampler2D uSampler;\\nvarying vec2 vTextureCoord;\\n\\nuniform float threshold;\\n\\nvoid main() {\\n    vec4 color = texture2D(uSampler, vTextureCoord);\\n\\n    // A simple & fast algorithm for getting brightness.\\n    // It's inaccuracy , but good enought for this feature.\\n    float _max = max(max(color.r, color.g), color.b);\\n    float _min = min(min(color.r, color.g), color.b);\\n    float brightness = (_max + _min) * 0.5;\\n\\n    if(brightness > threshold) {\\n        gl_FragColor = color;\\n    } else {\\n        gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\n    }\\n}\\n\";\n\n/**\n * Internal filter for AdvancedBloomFilter to get brightness.\n * @class\n * @private\n * @param {number} [threshold=0.5] Defines how bright a color needs to be extracted.\n */\nvar ExtractBrightnessFilter = /*@__PURE__*/(function (Filter) {\n    function ExtractBrightnessFilter(threshold) {\n        if ( threshold === void 0 ) threshold = 0.5;\n\n        Filter.call(this, vertex, fragment);\n\n        this.threshold = threshold;\n    }\n\n    if ( Filter ) ExtractBrightnessFilter.__proto__ = Filter;\n    ExtractBrightnessFilter.prototype = Object.create( Filter && Filter.prototype );\n    ExtractBrightnessFilter.prototype.constructor = ExtractBrightnessFilter;\n\n    var prototypeAccessors = { threshold: { configurable: true } };\n\n    /**\n     * Defines how bright a color needs to be extracted.\n     *\n     * @member {number}\n     * @default 0.5\n     */\n    prototypeAccessors.threshold.get = function () {\n        return this.uniforms.threshold;\n    };\n    prototypeAccessors.threshold.set = function (value) {\n        this.uniforms.threshold = value;\n    };\n\n    Object.defineProperties( ExtractBrightnessFilter.prototype, prototypeAccessors );\n\n    return ExtractBrightnessFilter;\n}(Filter));\n\nvar fragment$1 = \"uniform sampler2D uSampler;\\nvarying vec2 vTextureCoord;\\n\\nuniform sampler2D bloomTexture;\\nuniform float bloomScale;\\nuniform float brightness;\\n\\nvoid main() {\\n    vec4 color = texture2D(uSampler, vTextureCoord);\\n    color.rgb *= brightness;\\n    vec4 bloomColor = vec4(texture2D(bloomTexture, vTextureCoord).rgb, 0.0);\\n    bloomColor.rgb *= bloomScale;\\n    gl_FragColor = color + bloomColor;\\n}\\n\";\n\n/**\n * The AdvancedBloomFilter applies a Bloom Effect to an object. Unlike the normal BloomFilter\n * this had some advanced controls for adjusting the look of the bloom. Note: this filter\n * is slower than normal BloomFilter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/advanced-bloom.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-advanced-bloom|@pixi/filter-advanced-bloom}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n *\n * @param {object|number} [options] - The optional parameters of advanced bloom filter.\n *                        When options is a number , it will be `options.threshold`.\n * @param {number} [options.threshold=0.5] - Defines how bright a color needs to be to affect bloom.\n * @param {number} [options.bloomScale=1.0] - To adjust the strength of the bloom. Higher values is more intense brightness.\n * @param {number} [options.brightness=1.0] - The brightness, lower value is more subtle brightness, higher value is blown-out.\n * @param {number} [options.blur=8] - Sets the strength of the Blur properties simultaneously\n * @param {number} [options.quality=4] - The quality of the Blur filter.\n * @param {number[]} [options.kernels=null] - The kernels of the Blur filter.\n * @param {number|number[]|PIXI.Point} [options.pixelSize=1] - the pixelSize of the Blur filter.\n * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution of the Blur filter.\n */\nvar AdvancedBloomFilter = /*@__PURE__*/(function (Filter) {\n    function AdvancedBloomFilter(options) {\n\n        Filter.call(this, vertex, fragment$1);\n\n        if (typeof options === 'number') {\n            options = { threshold: options };\n        }\n\n        options = Object.assign({\n            threshold: 0.5,\n            bloomScale: 1.0,\n            brightness: 1.0,\n            kernels: null,\n            blur: 8,\n            quality: 4,\n            pixelSize: 1,\n            resolution: settings.RESOLUTION,\n        }, options);\n\n        /**\n         * To adjust the strength of the bloom. Higher values is more intense brightness.\n         *\n         * @member {number}\n         * @default 1.0\n         */\n        this.bloomScale = options.bloomScale;\n\n        /**\n         * The brightness, lower value is more subtle brightness, higher value is blown-out.\n         *\n         * @member {number}\n         * @default 1.0\n         */\n        this.brightness = options.brightness;\n\n        var kernels = options.kernels;\n        var blur = options.blur;\n        var quality = options.quality;\n        var pixelSize = options.pixelSize;\n        var resolution = options.resolution;\n\n        this._extractFilter = new ExtractBrightnessFilter(options.threshold);\n        this._extractFilter.resolution = resolution;\n        this._blurFilter = kernels ?\n            new KawaseBlurFilter(kernels) :\n            new KawaseBlurFilter(blur, quality);\n        this.pixelSize = pixelSize;\n        this.resolution = resolution;\n    }\n\n    if ( Filter ) AdvancedBloomFilter.__proto__ = Filter;\n    AdvancedBloomFilter.prototype = Object.create( Filter && Filter.prototype );\n    AdvancedBloomFilter.prototype.constructor = AdvancedBloomFilter;\n\n    var prototypeAccessors = { resolution: { configurable: true },threshold: { configurable: true },kernels: { configurable: true },blur: { configurable: true },quality: { configurable: true },pixelSize: { configurable: true } };\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    AdvancedBloomFilter.prototype.apply = function apply (filterManager, input, output, clear, currentState) {\n\n        var brightTarget = filterManager.getFilterTexture();\n\n        this._extractFilter.apply(filterManager, input, brightTarget, true, currentState);\n\n        var bloomTarget = filterManager.getFilterTexture();\n\n        this._blurFilter.apply(filterManager, brightTarget, bloomTarget, true, currentState);\n\n        this.uniforms.bloomScale = this.bloomScale;\n        this.uniforms.brightness = this.brightness;\n        this.uniforms.bloomTexture = bloomTarget;\n\n        filterManager.applyFilter(this, input, output, clear);\n\n        filterManager.returnFilterTexture(bloomTarget);\n        filterManager.returnFilterTexture(brightTarget);\n    };\n\n    /**\n     * The resolution of the filter.\n     *\n     * @member {number}\n     */\n    prototypeAccessors.resolution.get = function () {\n        return this._resolution;\n    };\n    prototypeAccessors.resolution.set = function (value) {\n        this._resolution = value;\n\n        if (this._extractFilter) {\n            this._extractFilter.resolution = value;\n        }\n        if (this._blurFilter) {\n            this._blurFilter.resolution = value;\n        }\n    };\n\n    /**\n     * Defines how bright a color needs to be to affect bloom.\n     *\n     * @member {number}\n     * @default 0.5\n     */\n    prototypeAccessors.threshold.get = function () {\n        return this._extractFilter.threshold;\n    };\n    prototypeAccessors.threshold.set = function (value) {\n        this._extractFilter.threshold = value;\n    };\n\n    /**\n     * Sets the kernels of the Blur Filter\n     *\n     * @member {number}\n     * @default 4\n     */\n    prototypeAccessors.kernels.get = function () {\n        return this._blurFilter.kernels;\n    };\n    prototypeAccessors.kernels.set = function (value) {\n        this._blurFilter.kernels = value;\n    };\n\n    /**\n     * Sets the strength of the Blur properties simultaneously\n     *\n     * @member {number}\n     * @default 2\n     */\n    prototypeAccessors.blur.get = function () {\n        return this._blurFilter.blur;\n    };\n    prototypeAccessors.blur.set = function (value) {\n        this._blurFilter.blur = value;\n    };\n\n    /**\n     * Sets the quality of the Blur Filter\n     *\n     * @member {number}\n     * @default 4\n     */\n    prototypeAccessors.quality.get = function () {\n        return this._blurFilter.quality;\n    };\n    prototypeAccessors.quality.set = function (value) {\n        this._blurFilter.quality = value;\n    };\n\n    /**\n     * Sets the pixelSize of the Kawase Blur filter\n     *\n     * @member {number|number[]|PIXI.Point}\n     * @default 1\n     */\n    prototypeAccessors.pixelSize.get = function () {\n        return this._blurFilter.pixelSize;\n    };\n    prototypeAccessors.pixelSize.set = function (value) {\n        this._blurFilter.pixelSize = value;\n    };\n\n    Object.defineProperties( AdvancedBloomFilter.prototype, prototypeAccessors );\n\n    return AdvancedBloomFilter;\n}(Filter));\n\nexport { AdvancedBloomFilter };\n//# sourceMappingURL=filter-advanced-bloom.esm.js.map\n","/*!\n * @pixi/filter-ascii - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-ascii is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"varying vec2 vTextureCoord;\\n\\nuniform vec4 filterArea;\\nuniform float pixelSize;\\nuniform sampler2D uSampler;\\n\\nvec2 mapCoord( vec2 coord )\\n{\\n    coord *= filterArea.xy;\\n    coord += filterArea.zw;\\n\\n    return coord;\\n}\\n\\nvec2 unmapCoord( vec2 coord )\\n{\\n    coord -= filterArea.zw;\\n    coord /= filterArea.xy;\\n\\n    return coord;\\n}\\n\\nvec2 pixelate(vec2 coord, vec2 size)\\n{\\n    return floor( coord / size ) * size;\\n}\\n\\nvec2 getMod(vec2 coord, vec2 size)\\n{\\n    return mod( coord , size) / size;\\n}\\n\\nfloat character(float n, vec2 p)\\n{\\n    p = floor(p*vec2(4.0, -4.0) + 2.5);\\n\\n    if (clamp(p.x, 0.0, 4.0) == p.x)\\n    {\\n        if (clamp(p.y, 0.0, 4.0) == p.y)\\n        {\\n            if (int(mod(n/exp2(p.x + 5.0*p.y), 2.0)) == 1) return 1.0;\\n        }\\n    }\\n    return 0.0;\\n}\\n\\nvoid main()\\n{\\n    vec2 coord = mapCoord(vTextureCoord);\\n\\n    // get the rounded color..\\n    vec2 pixCoord = pixelate(coord, vec2(pixelSize));\\n    pixCoord = unmapCoord(pixCoord);\\n\\n    vec4 color = texture2D(uSampler, pixCoord);\\n\\n    // determine the character to use\\n    float gray = (color.r + color.g + color.b) / 3.0;\\n\\n    float n =  65536.0;             // .\\n    if (gray > 0.2) n = 65600.0;    // :\\n    if (gray > 0.3) n = 332772.0;   // *\\n    if (gray > 0.4) n = 15255086.0; // o\\n    if (gray > 0.5) n = 23385164.0; // &\\n    if (gray > 0.6) n = 15252014.0; // 8\\n    if (gray > 0.7) n = 13199452.0; // @\\n    if (gray > 0.8) n = 11512810.0; // #\\n\\n    // get the mod..\\n    vec2 modd = getMod(coord, vec2(pixelSize));\\n\\n    gl_FragColor = color * character( n, vec2(-1.0) + modd * 2.0);\\n\\n}\\n\";\n\n// TODO (cengler) - The Y is flipped in this shader for some reason.\n\n/**\n * @author Vico @vicocotea\n * original shader : https://www.shadertoy.com/view/lssGDj by @movAX13h\n */\n\n/**\n * An ASCII filter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/ascii.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-ascii|@pixi/filter-ascii}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {number} [size=8] Size of the font\n */\nvar AsciiFilter = /*@__PURE__*/(function (Filter) {\n    function AsciiFilter(size) {\n        if ( size === void 0 ) size = 8;\n\n        Filter.call(this, vertex, fragment);\n        this.size = size;\n    }\n\n    if ( Filter ) AsciiFilter.__proto__ = Filter;\n    AsciiFilter.prototype = Object.create( Filter && Filter.prototype );\n    AsciiFilter.prototype.constructor = AsciiFilter;\n\n    var prototypeAccessors = { size: { configurable: true } };\n\n    /**\n     * The pixel size used by the filter.\n     *\n     * @member {number}\n     */\n    prototypeAccessors.size.get = function () {\n        return this.uniforms.pixelSize;\n    };\n    prototypeAccessors.size.set = function (value) {\n        this.uniforms.pixelSize = value;\n    };\n\n    Object.defineProperties( AsciiFilter.prototype, prototypeAccessors );\n\n    return AsciiFilter;\n}(Filter));\n\nexport { AsciiFilter };\n//# sourceMappingURL=filter-ascii.esm.js.map\n","/*!\n * @pixi/filter-bevel - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-bevel is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\nimport { DEG_TO_RAD } from '@pixi/math';\nimport { rgb2hex, hex2rgb } from '@pixi/utils';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"precision mediump float;\\n\\nvarying vec2 vTextureCoord;\\nuniform sampler2D uSampler;\\nuniform vec4 filterArea;\\n\\nuniform float transformX;\\nuniform float transformY;\\nuniform vec3 lightColor;\\nuniform float lightAlpha;\\nuniform vec3 shadowColor;\\nuniform float shadowAlpha;\\n\\nvoid main(void) {\\n    vec2 transform = vec2(1.0 / filterArea) * vec2(transformX, transformY);\\n    vec4 color = texture2D(uSampler, vTextureCoord);\\n    float light = texture2D(uSampler, vTextureCoord - transform).a;\\n    float shadow = texture2D(uSampler, vTextureCoord + transform).a;\\n\\n    color.rgb = mix(color.rgb, lightColor, clamp((color.a - light) * lightAlpha, 0.0, 1.0));\\n    color.rgb = mix(color.rgb, shadowColor, clamp((color.a - shadow) * shadowAlpha, 0.0, 1.0));\\n    gl_FragColor = vec4(color.rgb * color.a, color.a);\\n}\\n\";\n\n/**\n * Bevel Filter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/bevel.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-bevel|@pixi/filter-bevel}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {object} [options] - The optional parameters of the filter.\n * @param {number} [options.rotation = 45] - The angle of the light in degrees.\n * @param {number} [options.thickness = 2] - The tickness of the bevel.\n * @param {number} [options.lightColor = 0xffffff] - Color of the light.\n * @param {number} [options.lightAlpha = 0.7] - Alpha of the light.\n * @param {number} [options.shadowColor = 0x000000] - Color of the shadow.\n * @param {number} [options.shadowAlpha = 0.7] - Alpha of the shadow.\n */\nvar BevelFilter = /*@__PURE__*/(function (Filter) {\n    function BevelFilter(options) {\n        if ( options === void 0 ) options = {};\n\n        Filter.call(this, vertex, fragment);\n\n        this.uniforms.lightColor = new Float32Array(3);\n        this.uniforms.shadowColor = new Float32Array(3);\n\n        options = Object.assign({\n            rotation: 45,\n            thickness: 2,\n            lightColor: 0xffffff,\n            lightAlpha: 0.7,\n            shadowColor: 0x000000,\n            shadowAlpha: 0.7,\n        }, options);\n\n        /**\n         * The angle of the light in degrees.\n         * @member {number}\n         * @default 45\n         */\n        this.rotation = options.rotation;\n\n        /**\n         * The tickness of the bevel.\n         * @member {number}\n         * @default 2\n         */\n        this.thickness = options.thickness;\n\n        /**\n         * Color of the light.\n         * @member {number}\n         * @default 0xffffff\n         */\n        this.lightColor = options.lightColor;\n\n        /**\n         * Alpha of the light.\n         * @member {number}\n         * @default 0.7\n         */\n        this.lightAlpha = options.lightAlpha;\n\n        /**\n         * Color of the shadow.\n         * @member {number}\n         * @default 0x000000\n         */\n        this.shadowColor = options.shadowColor;\n\n        /**\n         * Alpha of the shadow.\n         * @member {number}\n         * @default 0.7\n         */\n        this.shadowAlpha = options.shadowAlpha;\n\n    }\n\n    if ( Filter ) BevelFilter.__proto__ = Filter;\n    BevelFilter.prototype = Object.create( Filter && Filter.prototype );\n    BevelFilter.prototype.constructor = BevelFilter;\n\n    var prototypeAccessors = { rotation: { configurable: true },thickness: { configurable: true },lightColor: { configurable: true },lightAlpha: { configurable: true },shadowColor: { configurable: true },shadowAlpha: { configurable: true } };\n\n    /**\n     * Update the transform matrix of offset angle.\n     * @private\n     */\n    BevelFilter.prototype._updateTransform = function _updateTransform () {\n        this.uniforms.transformX = this._thickness * Math.cos(this._angle);\n        this.uniforms.transformY = this._thickness * Math.sin(this._angle);\n    };\n\n    prototypeAccessors.rotation.get = function () {\n        return this._angle / DEG_TO_RAD;\n    };\n    prototypeAccessors.rotation.set = function (value) {\n        this._angle = value * DEG_TO_RAD;\n        this._updateTransform();\n    };\n\n    prototypeAccessors.thickness.get = function () {\n        return this._thickness;\n    };\n    prototypeAccessors.thickness.set = function (value) {\n        this._thickness = value;\n        this._updateTransform();\n    };\n\n    prototypeAccessors.lightColor.get = function () {\n        return rgb2hex(this.uniforms.lightColor);\n    };\n    prototypeAccessors.lightColor.set = function (value) {\n        hex2rgb(value, this.uniforms.lightColor);\n    };\n\n    prototypeAccessors.lightAlpha.get = function () {\n        return this.uniforms.lightAlpha;\n    };\n    prototypeAccessors.lightAlpha.set = function (value) {\n        this.uniforms.lightAlpha = value;\n    };\n\n    prototypeAccessors.shadowColor.get = function () {\n        return rgb2hex(this.uniforms.shadowColor);\n    };\n    prototypeAccessors.shadowColor.set = function (value) {\n        hex2rgb(value, this.uniforms.shadowColor);\n    };\n\n    prototypeAccessors.shadowAlpha.get = function () {\n        return this.uniforms.shadowAlpha;\n    };\n    prototypeAccessors.shadowAlpha.set = function (value) {\n        this.uniforms.shadowAlpha = value;\n    };\n\n    Object.defineProperties( BevelFilter.prototype, prototypeAccessors );\n\n    return BevelFilter;\n}(Filter));\n\nexport { BevelFilter };\n//# sourceMappingURL=filter-bevel.esm.js.map\n","/*!\n * @pixi/filter-bloom - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-bloom is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\nimport { BLEND_MODES } from '@pixi/constants';\nimport { AlphaFilter } from '@pixi/filter-alpha';\nimport { BlurFilterPass } from '@pixi/filter-blur';\nimport { settings } from '@pixi/settings';\nimport { Point } from '@pixi/math';\n\n/**\n * The BloomFilter applies a Gaussian blur to an object.\n * The strength of the blur can be set for x- and y-axis separately.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/bloom.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-bloom|@pixi/filter-bloom}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {number|PIXI.Point|number[]} [blur=2] Sets the strength of both the blurX and blurY properties simultaneously\n * @param {number} [quality=4] The quality of the blurX & blurY filter.\n * @param {number} [resolution=PIXI.settings.RESOLUTION] The resolution of the blurX & blurY filter.\n * @param {number} [kernelSize=5] The kernelSize of the blurX & blurY filter.Options: 5, 7, 9, 11, 13, 15.\n */\nvar BloomFilter = /*@__PURE__*/(function (Filter) {\n    function BloomFilter(blur, quality, resolution, kernelSize) {\n        if ( blur === void 0 ) blur = 2;\n        if ( quality === void 0 ) quality = 4;\n        if ( resolution === void 0 ) resolution = settings.RESOLUTION;\n        if ( kernelSize === void 0 ) kernelSize = 5;\n\n        Filter.call(this);\n\n        var blurX;\n        var blurY;\n\n        if (typeof blur === 'number') {\n            blurX = blur;\n            blurY = blur;\n        }\n        else if (blur instanceof Point) {\n            blurX = blur.x;\n            blurY = blur.y;\n        }\n        else if (Array.isArray(blur)) {\n            blurX = blur[0];\n            blurY = blur[1];\n        }\n\n        this.blurXFilter = new BlurFilterPass(true, blurX, quality, resolution, kernelSize);\n        this.blurYFilter = new BlurFilterPass(false, blurY, quality, resolution, kernelSize);\n        this.blurYFilter.blendMode = BLEND_MODES.SCREEN;\n        this.defaultFilter = new AlphaFilter();\n    }\n\n    if ( Filter ) BloomFilter.__proto__ = Filter;\n    BloomFilter.prototype = Object.create( Filter && Filter.prototype );\n    BloomFilter.prototype.constructor = BloomFilter;\n\n    var prototypeAccessors = { blur: { configurable: true },blurX: { configurable: true },blurY: { configurable: true } };\n\n    BloomFilter.prototype.apply = function apply (filterManager, input, output) {\n        var renderTarget = filterManager.getFilterTexture(true);\n\n        //TODO - copyTexSubImage2D could be used here?\n        this.defaultFilter.apply(filterManager, input, output);\n\n        this.blurXFilter.apply(filterManager, input, renderTarget);\n        this.blurYFilter.apply(filterManager, renderTarget, output);\n\n        filterManager.returnFilterTexture(renderTarget);\n    };\n\n    /**\n     * Sets the strength of both the blurX and blurY properties simultaneously\n     *\n     * @member {number}\n     * @default 2\n     */\n    prototypeAccessors.blur.get = function () {\n        return this.blurXFilter.blur;\n    };\n    prototypeAccessors.blur.set = function (value) {\n        this.blurXFilter.blur = this.blurYFilter.blur = value;\n    };\n\n    /**\n     * Sets the strength of the blurX property\n     *\n     * @member {number}\n     * @default 2\n     */\n    prototypeAccessors.blurX.get = function () {\n        return this.blurXFilter.blur;\n    };\n    prototypeAccessors.blurX.set = function (value) {\n        this.blurXFilter.blur = value;\n    };\n\n    /**\n     * Sets the strength of the blurY property\n     *\n     * @member {number}\n     * @default 2\n     */\n    prototypeAccessors.blurY.get = function () {\n        return this.blurYFilter.blur;\n    };\n    prototypeAccessors.blurY.set = function (value) {\n        this.blurYFilter.blur = value;\n    };\n\n    Object.defineProperties( BloomFilter.prototype, prototypeAccessors );\n\n    return BloomFilter;\n}(Filter));\n\nexport { BloomFilter };\n//# sourceMappingURL=filter-bloom.esm.js.map\n","/*!\n * @pixi/filter-bulge-pinch - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-bulge-pinch is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"uniform float radius;\\nuniform float strength;\\nuniform vec2 center;\\nuniform sampler2D uSampler;\\nvarying vec2 vTextureCoord;\\n\\nuniform vec4 filterArea;\\nuniform vec4 filterClamp;\\nuniform vec2 dimensions;\\n\\nvoid main()\\n{\\n    vec2 coord = vTextureCoord * filterArea.xy;\\n    coord -= center * dimensions.xy;\\n    float distance = length(coord);\\n    if (distance < radius) {\\n        float percent = distance / radius;\\n        if (strength > 0.0) {\\n            coord *= mix(1.0, smoothstep(0.0, radius / distance, percent), strength * 0.75);\\n        } else {\\n            coord *= mix(1.0, pow(percent, 1.0 + strength * 0.75) * radius / distance, 1.0 - percent);\\n        }\\n    }\\n    coord += center * dimensions.xy;\\n    coord /= filterArea.xy;\\n    vec2 clampedCoord = clamp(coord, filterClamp.xy, filterClamp.zw);\\n    vec4 color = texture2D(uSampler, clampedCoord);\\n    if (coord != clampedCoord) {\\n        color *= max(0.0, 1.0 - length(coord - clampedCoord));\\n    }\\n\\n    gl_FragColor = color;\\n}\\n\";\n\n/**\n * @author Julien CLEREL @JuloxRox\n * original filter https://github.com/evanw/glfx.js/blob/master/src/filters/warp/bulgepinch.js by Evan Wallace : http://madebyevan.com/\n */\n\n/**\n * Bulges or pinches the image in a circle.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/bulge-pinch.gif)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-bulge-pinch|@pixi/filter-bulge-pinch}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {PIXI.Point|Array<number>} [center=[0,0]] The x and y coordinates of the center of the circle of effect.\n * @param {number} [radius=100] The radius of the circle of effect.\n * @param {number} [strength=1] -1 to 1 (-1 is strong pinch, 0 is no effect, 1 is strong bulge)\n */\nvar BulgePinchFilter = /*@__PURE__*/(function (Filter) {\n    function BulgePinchFilter(center, radius, strength) {\n        Filter.call(this, vertex, fragment);\n        this.uniforms.dimensions = new Float32Array(2);\n        this.center = center || [0.5, 0.5];\n        this.radius = (typeof radius === 'number') ? radius : 100; // allow 0 to be passed\n        this.strength = (typeof strength === 'number') ? strength : 1; // allow 0 to be passed\n    }\n\n    if ( Filter ) BulgePinchFilter.__proto__ = Filter;\n    BulgePinchFilter.prototype = Object.create( Filter && Filter.prototype );\n    BulgePinchFilter.prototype.constructor = BulgePinchFilter;\n\n    var prototypeAccessors = { radius: { configurable: true },strength: { configurable: true },center: { configurable: true } };\n\n    BulgePinchFilter.prototype.apply = function apply (filterManager, input, output, clear) {\n        this.uniforms.dimensions[0] = input.filterFrame.width;\n        this.uniforms.dimensions[1] = input.filterFrame.height;\n        filterManager.applyFilter(this, input, output, clear);\n    };\n\n    /**\n     * The radius of the circle of effect.\n     *\n     * @member {number}\n     */\n    prototypeAccessors.radius.get = function () {\n        return this.uniforms.radius;\n    };\n    prototypeAccessors.radius.set = function (value) {\n        this.uniforms.radius = value;\n    };\n\n    /**\n     * The strength of the effect. -1 to 1 (-1 is strong pinch, 0 is no effect, 1 is strong bulge)\n     *\n     * @member {number}\n     */\n    prototypeAccessors.strength.get = function () {\n        return this.uniforms.strength;\n    };\n    prototypeAccessors.strength.set = function (value) {\n        this.uniforms.strength = value;\n    };\n\n    /**\n     * The x and y coordinates of the center of the circle of effect.\n     *\n     * @member {PIXI.Point}\n     */\n    prototypeAccessors.center.get = function () {\n        return this.uniforms.center;\n    };\n    prototypeAccessors.center.set = function (value) {\n        this.uniforms.center = value;\n    };\n\n    Object.defineProperties( BulgePinchFilter.prototype, prototypeAccessors );\n\n    return BulgePinchFilter;\n}(Filter));\n\nexport { BulgePinchFilter };\n//# sourceMappingURL=filter-bulge-pinch.esm.js.map\n","/*!\n * @pixi/filter-color-map - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-color-map is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Texture, Filter } from '@pixi/core';\nimport { SCALE_MODES } from '@pixi/constants';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"varying vec2 vTextureCoord;\\nuniform sampler2D uSampler;\\nuniform sampler2D colorMap;\\nuniform float _mix;\\nuniform float _size;\\nuniform float _sliceSize;\\nuniform float _slicePixelSize;\\nuniform float _sliceInnerSize;\\nvoid main() {\\n    vec4 color = texture2D(uSampler, vTextureCoord.xy);\\n\\n    vec4 adjusted;\\n    if (color.a > 0.0) {\\n        color.rgb /= color.a;\\n        float innerWidth = _size - 1.0;\\n        float zSlice0 = min(floor(color.b * innerWidth), innerWidth);\\n        float zSlice1 = min(zSlice0 + 1.0, innerWidth);\\n        float xOffset = _slicePixelSize * 0.5 + color.r * _sliceInnerSize;\\n        float s0 = xOffset + (zSlice0 * _sliceSize);\\n        float s1 = xOffset + (zSlice1 * _sliceSize);\\n        float yOffset = _sliceSize * 0.5 + color.g * (1.0 - _sliceSize);\\n        vec4 slice0Color = texture2D(colorMap, vec2(s0,yOffset));\\n        vec4 slice1Color = texture2D(colorMap, vec2(s1,yOffset));\\n        float zOffset = fract(color.b * innerWidth);\\n        adjusted = mix(slice0Color, slice1Color, zOffset);\\n\\n        color.rgb *= color.a;\\n    }\\n    gl_FragColor = vec4(mix(color, adjusted, _mix).rgb, color.a);\\n\\n}\";\n\n/**\n * The ColorMapFilter applies a color-map effect to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/color-map.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-color-map|@pixi/filter-color-map}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {HTMLImageElement|HTMLCanvasElement|PIXI.BaseTexture|PIXI.Texture} [colorMap] - The colorMap texture of the filter.\n * @param {boolean} [nearest=false] - Whether use NEAREST for colorMap texture.\n * @param {number} [mix=1] - The mix from 0 to 1, where 0 is the original image and 1 is the color mapped image.\n */\nvar ColorMapFilter = /*@__PURE__*/(function (Filter) {\n    function ColorMapFilter(colorMap, nearest, mix) {\n        if ( nearest === void 0 ) nearest = false;\n        if ( mix === void 0 ) mix = 1;\n\n        Filter.call(this, vertex, fragment);\n\n        this._size = 0;\n        this._sliceSize = 0;\n        this._slicePixelSize = 0;\n        this._sliceInnerSize = 0;\n\n        this._scaleMode = null;\n        this._nearest = false;\n        this.nearest = nearest;\n\n        /**\n         * The mix from 0 to 1, where 0 is the original image and 1 is the color mapped image.\n         * @member {number}\n         */\n        this.mix = mix;\n\n        this.colorMap = colorMap;\n    }\n\n    if ( Filter ) ColorMapFilter.__proto__ = Filter;\n    ColorMapFilter.prototype = Object.create( Filter && Filter.prototype );\n    ColorMapFilter.prototype.constructor = ColorMapFilter;\n\n    var prototypeAccessors = { colorSize: { configurable: true },colorMap: { configurable: true },nearest: { configurable: true } };\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    ColorMapFilter.prototype.apply = function apply (filterManager, input, output, clear) {\n        this.uniforms._mix = this.mix;\n\n        filterManager.applyFilter(this, input, output, clear);\n    };\n\n    /**\n     * the size of one color slice\n     * @member {number}\n     * @readonly\n     */\n    prototypeAccessors.colorSize.get = function () {\n        return this._size;\n    };\n\n    /**\n     * the colorMap texture\n     * @member {PIXI.Texture}\n     */\n    prototypeAccessors.colorMap.get = function () {\n        return this._colorMap;\n    };\n    prototypeAccessors.colorMap.set = function (colorMap) {\n        if (!(colorMap instanceof Texture)) {\n            colorMap = Texture.from(colorMap);\n        }\n        if (colorMap && colorMap.baseTexture) {\n            colorMap.baseTexture.scaleMode = this._scaleMode;\n            colorMap.baseTexture.mipmap = false;\n\n            this._size = colorMap.height;\n            this._sliceSize = 1 / this._size;\n            this._slicePixelSize = this._sliceSize / this._size;\n            this._sliceInnerSize = this._slicePixelSize * (this._size - 1);\n\n            this.uniforms._size = this._size;\n            this.uniforms._sliceSize = this._sliceSize;\n            this.uniforms._slicePixelSize = this._slicePixelSize;\n            this.uniforms._sliceInnerSize = this._sliceInnerSize;\n\n            this.uniforms.colorMap = colorMap;\n        }\n\n        this._colorMap = colorMap;\n    };\n\n    /**\n     * Whether use NEAREST for colorMap texture.\n     * @member {boolean}\n     */\n    prototypeAccessors.nearest.get = function () {\n        return this._nearest;\n    };\n    prototypeAccessors.nearest.set = function (nearest) {\n        this._nearest = nearest;\n        this._scaleMode = nearest ? SCALE_MODES.NEAREST : SCALE_MODES.LINEAR;\n\n        var texture = this._colorMap;\n\n        if (texture && texture.baseTexture) {\n            texture.baseTexture._glTextures = {};\n\n            texture.baseTexture.scaleMode = this._scaleMode;\n            texture.baseTexture.mipmap = false;\n\n            texture._updateID++;\n            texture.baseTexture.emit('update', texture.baseTexture);\n        }\n    };\n\n    /**\n     * If the colorMap is based on canvas , and the content of canvas has changed,\n     *   then call `updateColorMap` for update texture.\n     */\n    ColorMapFilter.prototype.updateColorMap = function updateColorMap () {\n        var texture = this._colorMap;\n\n        if (texture && texture.baseTexture) {\n            texture._updateID++;\n            texture.baseTexture.emit('update', texture.baseTexture);\n\n            this.colorMap = texture;\n        }\n    };\n\n    /**\n     * Destroys this filter\n     *\n     * @param {boolean} [destroyBase=false] Whether to destroy the base texture of colorMap as well\n     */\n    ColorMapFilter.prototype.destroy = function destroy (destroyBase) {\n        if (this._colorMap) {\n            this._colorMap.destroy(destroyBase);\n        }\n        Filter.prototype.destroy.call(this);\n    };\n\n    Object.defineProperties( ColorMapFilter.prototype, prototypeAccessors );\n\n    return ColorMapFilter;\n}(Filter));\n\nexport { ColorMapFilter };\n//# sourceMappingURL=filter-color-map.esm.js.map\n","/*!\n * @pixi/filter-color-replace - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-color-replace is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\nimport { hex2rgb, rgb2hex } from '@pixi/utils';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"varying vec2 vTextureCoord;\\nuniform sampler2D uSampler;\\nuniform vec3 originalColor;\\nuniform vec3 newColor;\\nuniform float epsilon;\\nvoid main(void) {\\n    vec4 currentColor = texture2D(uSampler, vTextureCoord);\\n    vec3 colorDiff = originalColor - (currentColor.rgb / max(currentColor.a, 0.0000000001));\\n    float colorDistance = length(colorDiff);\\n    float doReplace = step(colorDistance, epsilon);\\n    gl_FragColor = vec4(mix(currentColor.rgb, (newColor + colorDiff) * currentColor.a, doReplace), currentColor.a);\\n}\\n\";\n\n/**\n * ColorReplaceFilter, originally by mishaa, updated by timetocode\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/color-replace.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-color-replace|@pixi/filter-color-replace}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {number|Array<number>} [originalColor=0xFF0000] The color that will be changed, as a 3 component RGB e.g. [1.0, 1.0, 1.0]\n * @param {number|Array<number>} [newColor=0x000000] The resulting color, as a 3 component RGB e.g. [1.0, 0.5, 1.0]\n * @param {number} [epsilon=0.4] Tolerance/sensitivity of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\n *\n * @example\n *  // replaces true red with true blue\n *  someSprite.filters = [new ColorReplaceFilter(\n *   [1, 0, 0],\n *   [0, 0, 1],\n *   0.001\n *   )];\n *  // replaces the RGB color 220, 220, 220 with the RGB color 225, 200, 215\n *  someOtherSprite.filters = [new ColorReplaceFilter(\n *   [220/255.0, 220/255.0, 220/255.0],\n *   [225/255.0, 200/255.0, 215/255.0],\n *   0.001\n *   )];\n *  // replaces the RGB color 220, 220, 220 with the RGB color 225, 200, 215\n *  someOtherSprite.filters = [new ColorReplaceFilter(0xdcdcdc, 0xe1c8d7, 0.001)];\n *\n */\nvar ColorReplaceFilter = /*@__PURE__*/(function (Filter) {\n    function ColorReplaceFilter(originalColor, newColor, epsilon) {\n        if ( originalColor === void 0 ) originalColor = 0xFF0000;\n        if ( newColor === void 0 ) newColor = 0x000000;\n        if ( epsilon === void 0 ) epsilon = 0.4;\n\n        Filter.call(this, vertex, fragment);\n        this.uniforms.originalColor = new Float32Array(3);\n        this.uniforms.newColor = new Float32Array(3);\n        this.originalColor = originalColor;\n        this.newColor = newColor;\n        this.epsilon = epsilon;\n    }\n\n    if ( Filter ) ColorReplaceFilter.__proto__ = Filter;\n    ColorReplaceFilter.prototype = Object.create( Filter && Filter.prototype );\n    ColorReplaceFilter.prototype.constructor = ColorReplaceFilter;\n\n    var prototypeAccessors = { originalColor: { configurable: true },newColor: { configurable: true },epsilon: { configurable: true } };\n\n    /**\n     * The color that will be changed, as a 3 component RGB e.g. [1.0, 1.0, 1.0]\n     * @member {number|Array<number>}\n     * @default 0xFF0000\n     */\n    prototypeAccessors.originalColor.set = function (value) {\n        var arr = this.uniforms.originalColor;\n        if (typeof value === 'number') {\n            hex2rgb(value, arr);\n            this._originalColor = value;\n        }\n        else {\n            arr[0] = value[0];\n            arr[1] = value[1];\n            arr[2] = value[2];\n            this._originalColor = rgb2hex(arr);\n        }\n    };\n    prototypeAccessors.originalColor.get = function () {\n        return this._originalColor;\n    };\n\n    /**\n     * The resulting color, as a 3 component RGB e.g. [1.0, 0.5, 1.0]\n     * @member {number|Array<number>}\n     * @default 0x000000\n     */\n    prototypeAccessors.newColor.set = function (value) {\n        var arr = this.uniforms.newColor;\n        if (typeof value === 'number') {\n            hex2rgb(value, arr);\n            this._newColor = value;\n        }\n        else {\n            arr[0] = value[0];\n            arr[1] = value[1];\n            arr[2] = value[2];\n            this._newColor = rgb2hex(arr);\n        }\n    };\n    prototypeAccessors.newColor.get = function () {\n        return this._newColor;\n    };\n\n    /**\n     * Tolerance/sensitivity of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\n     * @member {number}\n     * @default 0.4\n     */\n    prototypeAccessors.epsilon.set = function (value) {\n        this.uniforms.epsilon = value;\n    };\n    prototypeAccessors.epsilon.get = function () {\n        return this.uniforms.epsilon;\n    };\n\n    Object.defineProperties( ColorReplaceFilter.prototype, prototypeAccessors );\n\n    return ColorReplaceFilter;\n}(Filter));\n\nexport { ColorReplaceFilter };\n//# sourceMappingURL=filter-color-replace.esm.js.map\n","/*!\n * @pixi/filter-convolution - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-convolution is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"precision mediump float;\\n\\nvarying mediump vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\nuniform vec2 texelSize;\\nuniform float matrix[9];\\n\\nvoid main(void)\\n{\\n   vec4 c11 = texture2D(uSampler, vTextureCoord - texelSize); // top left\\n   vec4 c12 = texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - texelSize.y)); // top center\\n   vec4 c13 = texture2D(uSampler, vec2(vTextureCoord.x + texelSize.x, vTextureCoord.y - texelSize.y)); // top right\\n\\n   vec4 c21 = texture2D(uSampler, vec2(vTextureCoord.x - texelSize.x, vTextureCoord.y)); // mid left\\n   vec4 c22 = texture2D(uSampler, vTextureCoord); // mid center\\n   vec4 c23 = texture2D(uSampler, vec2(vTextureCoord.x + texelSize.x, vTextureCoord.y)); // mid right\\n\\n   vec4 c31 = texture2D(uSampler, vec2(vTextureCoord.x - texelSize.x, vTextureCoord.y + texelSize.y)); // bottom left\\n   vec4 c32 = texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + texelSize.y)); // bottom center\\n   vec4 c33 = texture2D(uSampler, vTextureCoord + texelSize); // bottom right\\n\\n   gl_FragColor =\\n       c11 * matrix[0] + c12 * matrix[1] + c13 * matrix[2] +\\n       c21 * matrix[3] + c22 * matrix[4] + c23 * matrix[5] +\\n       c31 * matrix[6] + c32 * matrix[7] + c33 * matrix[8];\\n\\n   gl_FragColor.a = c22.a;\\n}\\n\";\n\n/**\n * The ConvolutionFilter class applies a matrix convolution filter effect.\n * A convolution combines pixels in the input image with neighboring pixels to produce a new image.\n * A wide variety of image effects can be achieved through convolutions, including blurring, edge\n * detection, sharpening, embossing, and beveling. The matrix should be specified as a 9 point Array.\n * See http://docs.gimp.org/en/plug-in-convmatrix.html for more info.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/convolution.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-convolution|@pixi/filter-convolution}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param [matrix=[0,0,0,0,0,0,0,0,0]] {number[]} An array of values used for matrix transformation. Specified as a 9 point Array.\n * @param [width=200] {number} Width of the object you are transforming\n * @param [height=200] {number} Height of the object you are transforming\n */\nvar ConvolutionFilter = /*@__PURE__*/(function (Filter) {\n    function ConvolutionFilter(matrix, width, height) {\n        if ( width === void 0 ) width = 200;\n        if ( height === void 0 ) height = 200;\n\n        Filter.call(this, vertex, fragment);\n        this.uniforms.texelSize = new Float32Array(2);\n        this.uniforms.matrix = new Float32Array(9);\n        if (matrix !== undefined) {\n            this.matrix = matrix;\n        }\n        this.width = width;\n        this.height = height;\n    }\n\n    if ( Filter ) ConvolutionFilter.__proto__ = Filter;\n    ConvolutionFilter.prototype = Object.create( Filter && Filter.prototype );\n    ConvolutionFilter.prototype.constructor = ConvolutionFilter;\n\n    var prototypeAccessors = { matrix: { configurable: true },width: { configurable: true },height: { configurable: true } };\n\n    /**\n     * An array of values used for matrix transformation. Specified as a 9 point Array.\n     *\n     * @member {Array<number>}\n     */\n    prototypeAccessors.matrix.get = function () {\n        return this.uniforms.matrix;\n    };\n    prototypeAccessors.matrix.set = function (matrix) {\n        var this$1 = this;\n\n        matrix.forEach(function (v, i) { return this$1.uniforms.matrix[i] = v; });\n    };\n\n    /**\n     * Width of the object you are transforming\n     *\n     * @member {number}\n     */\n    prototypeAccessors.width.get = function () {\n        return 1/this.uniforms.texelSize[0];\n    };\n    prototypeAccessors.width.set = function (value) {\n        this.uniforms.texelSize[0] = 1/value;\n    };\n\n    /**\n     * Height of the object you are transforming\n     *\n     * @member {number}\n     */\n    prototypeAccessors.height.get = function () {\n        return 1/this.uniforms.texelSize[1];\n    };\n    prototypeAccessors.height.set = function (value) {\n        this.uniforms.texelSize[1] = 1/value;\n    };\n\n    Object.defineProperties( ConvolutionFilter.prototype, prototypeAccessors );\n\n    return ConvolutionFilter;\n}(Filter));\n\nexport { ConvolutionFilter };\n//# sourceMappingURL=filter-convolution.esm.js.map\n","/*!\n * @pixi/filter-cross-hatch - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-cross-hatch is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"precision mediump float;\\n\\nvarying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\n\\nvoid main(void)\\n{\\n    float lum = length(texture2D(uSampler, vTextureCoord.xy).rgb);\\n\\n    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n    if (lum < 1.00)\\n    {\\n        if (mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) == 0.0)\\n        {\\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n        }\\n    }\\n\\n    if (lum < 0.75)\\n    {\\n        if (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) == 0.0)\\n        {\\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n        }\\n    }\\n\\n    if (lum < 0.50)\\n    {\\n        if (mod(gl_FragCoord.x + gl_FragCoord.y - 5.0, 10.0) == 0.0)\\n        {\\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n        }\\n    }\\n\\n    if (lum < 0.3)\\n    {\\n        if (mod(gl_FragCoord.x - gl_FragCoord.y - 5.0, 10.0) == 0.0)\\n        {\\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n        }\\n    }\\n}\\n\";\n\n/**\n * A Cross Hatch effect filter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/cross-hatch.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-cross-hatch|@pixi/filter-cross-hatch}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n */\nvar CrossHatchFilter = /*@__PURE__*/(function (Filter) {\n    function CrossHatchFilter() {\n        Filter.call(this, vertex, fragment);\n    }\n\n    if ( Filter ) CrossHatchFilter.__proto__ = Filter;\n    CrossHatchFilter.prototype = Object.create( Filter && Filter.prototype );\n    CrossHatchFilter.prototype.constructor = CrossHatchFilter;\n\n    return CrossHatchFilter;\n}(Filter));\n\nexport { CrossHatchFilter };\n//# sourceMappingURL=filter-cross-hatch.esm.js.map\n","/*!\n * @pixi/filter-crt - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-crt is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"varying vec2 vTextureCoord;\\nuniform sampler2D uSampler;\\n\\nuniform vec4 filterArea;\\nuniform vec2 dimensions;\\n\\nconst float SQRT_2 = 1.414213;\\n\\nconst float light = 1.0;\\n\\nuniform float curvature;\\nuniform float lineWidth;\\nuniform float lineContrast;\\nuniform bool verticalLine;\\nuniform float noise;\\nuniform float noiseSize;\\n\\nuniform float vignetting;\\nuniform float vignettingAlpha;\\nuniform float vignettingBlur;\\n\\nuniform float seed;\\nuniform float time;\\n\\nfloat rand(vec2 co) {\\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\\n}\\n\\nvoid main(void)\\n{\\n    vec2 pixelCoord = vTextureCoord.xy * filterArea.xy;\\n    vec2 coord = pixelCoord / dimensions;\\n\\n    vec2 dir = vec2(coord - vec2(0.5, 0.5));\\n\\n    float _c = curvature > 0. ? curvature : 1.;\\n    float k = curvature > 0. ?(length(dir * dir) * 0.25 * _c * _c + 0.935 * _c) : 1.;\\n    vec2 uv = dir * k;\\n\\n    gl_FragColor = texture2D(uSampler, vTextureCoord);\\n    vec3 rgb = gl_FragColor.rgb;\\n\\n\\n    if (noise > 0.0 && noiseSize > 0.0)\\n    {\\n        pixelCoord.x = floor(pixelCoord.x / noiseSize);\\n        pixelCoord.y = floor(pixelCoord.y / noiseSize);\\n        float _noise = rand(pixelCoord * noiseSize * seed) - 0.5;\\n        rgb += _noise * noise;\\n    }\\n\\n    if (lineWidth > 0.0) {\\n        float v = (verticalLine ? uv.x * dimensions.x : uv.y * dimensions.y) * min(1.0, 2.0 / lineWidth ) / _c;\\n        float j = 1. + cos(v * 1.2 - time) * 0.5 * lineContrast;\\n        rgb *= j;\\n        float segment = verticalLine ? mod((dir.x + .5) * dimensions.x, 4.) : mod((dir.y + .5) * dimensions.y, 4.);\\n        rgb *= 0.99 + ceil(segment) * 0.015;\\n    }\\n\\n    if (vignetting > 0.0)\\n    {\\n        float outter = SQRT_2 - vignetting * SQRT_2;\\n        float darker = clamp((outter - length(dir) * SQRT_2) / ( 0.00001 + vignettingBlur * SQRT_2), 0.0, 1.0);\\n        rgb *= darker + (1.0 - darker) * (1.0 - vignettingAlpha);\\n    }\\n\\n    gl_FragColor.rgb = rgb;\\n}\\n\";\n\n/**\n * The CRTFilter applies a CRT effect to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/crt.gif)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-crt|@pixi/filter-crt}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n *\n * @param {object} [options] - The optional parameters of CRT effect\n * @param {number} [options.curvature=1.0] - Bent of interlaced lines, higher value means more bend\n * @param {number} [options.lineWidth=1.0] - Width of the interlaced lines\n * @param {number} [options.lineContrast=0.25] - Contrast of interlaced lines\n * @param {number} [options.verticalLine=false] - `true` is vertical lines, `false` is horizontal\n * @param {number} [options.noise=0.3] - Opacity/intensity of the noise effect between `0` and `1`\n * @param {number} [options.noiseSize=1.0] - The size of the noise particles\n * @param {number} [options.seed=0] - A seed value to apply to the random noise generation\n * @param {number} [options.vignetting=0.3] - The radius of the vignette effect, smaller\n *        values produces a smaller vignette\n * @param {number} [options.vignettingAlpha=1.0] - Amount of opacity of vignette\n * @param {number} [options.vignettingBlur=0.3] - Blur intensity of the vignette\n * @param {number} [options.time=0] - For animating interlaced lines\n */\nvar CRTFilter = /*@__PURE__*/(function (Filter) {\n    function CRTFilter(options) {\n        Filter.call(this, vertex, fragment);\n        this.uniforms.dimensions = new Float32Array(2);\n\n        /**\n         * For animating interlaced lines\n         *\n         * @member {number}\n         * @default 0\n         */\n        this.time = 0;\n\n        /**\n         * A seed value to apply to the random noise generation\n         *\n         * @member {number}\n         * @default 0\n         */\n        this.seed = 0;\n\n        Object.assign(this, {\n            curvature: 1.0,\n            lineWidth: 1.0,\n            lineContrast: 0.25,\n            verticalLine: false,\n            noise: 0.0,\n            noiseSize: 1.0,\n            seed: 0.0,\n            vignetting: 0.3,\n            vignettingAlpha: 1.0,\n            vignettingBlur: 0.3,\n            time: 0.0,\n        }, options);\n    }\n\n    if ( Filter ) CRTFilter.__proto__ = Filter;\n    CRTFilter.prototype = Object.create( Filter && Filter.prototype );\n    CRTFilter.prototype.constructor = CRTFilter;\n\n    var prototypeAccessors = { curvature: { configurable: true },lineWidth: { configurable: true },lineContrast: { configurable: true },verticalLine: { configurable: true },noise: { configurable: true },noiseSize: { configurable: true },vignetting: { configurable: true },vignettingAlpha: { configurable: true },vignettingBlur: { configurable: true } };\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    CRTFilter.prototype.apply = function apply (filterManager, input, output, clear) {\n        this.uniforms.dimensions[0] = input.filterFrame.width;\n        this.uniforms.dimensions[1] = input.filterFrame.height;\n\n        this.uniforms.seed = this.seed;\n        this.uniforms.time = this.time;\n\n        filterManager.applyFilter(this, input, output, clear);\n    };\n\n    /**\n     * Bent of interlaced lines, higher value means more bend\n     *\n     * @member {number}\n     * @default 1\n     */\n    prototypeAccessors.curvature.set = function (value) {\n        this.uniforms.curvature = value;\n    };\n    prototypeAccessors.curvature.get = function () {\n        return this.uniforms.curvature;\n    };\n\n    /**\n     * Width of interlaced lines\n     *\n     * @member {number}\n     * @default 1\n     */\n    prototypeAccessors.lineWidth.set = function (value) {\n        this.uniforms.lineWidth = value;\n    };\n    prototypeAccessors.lineWidth.get = function () {\n        return this.uniforms.lineWidth;\n    };\n\n    /**\n     * Contrast of interlaced lines\n     *\n     * @member {number}\n     * @default 0.25\n     */\n    prototypeAccessors.lineContrast.set = function (value) {\n        this.uniforms.lineContrast = value;\n    };\n    prototypeAccessors.lineContrast.get = function () {\n        return this.uniforms.lineContrast;\n    };\n\n    /**\n     * `true` for vertical lines, `false` for horizontal lines\n     *\n     * @member {boolean}\n     * @default false\n     */\n    prototypeAccessors.verticalLine.set = function (value) {\n        this.uniforms.verticalLine = value;\n    };\n    prototypeAccessors.verticalLine.get = function () {\n        return this.uniforms.verticalLine;\n    };\n\n    /**\n     * Opacity/intensity of the noise effect between `0` and `1`\n     *\n     * @member {number}\n     * @default 0\n     */\n    prototypeAccessors.noise.set = function (value) {\n        this.uniforms.noise = value;\n    };\n    prototypeAccessors.noise.get = function () {\n        return this.uniforms.noise;\n    };\n\n    /**\n     * The size of the noise particles\n     *\n     * @member {number}\n     * @default 0\n     */\n    prototypeAccessors.noiseSize.set = function (value) {\n        this.uniforms.noiseSize = value;\n    };\n    prototypeAccessors.noiseSize.get = function () {\n        return this.uniforms.noiseSize;\n    };\n\n    /**\n     * The radius of the vignette effect, smaller\n     * values produces a smaller vignette\n     *\n     * @member {number}\n     * @default 0\n     */\n    prototypeAccessors.vignetting.set = function (value) {\n        this.uniforms.vignetting = value;\n    };\n    prototypeAccessors.vignetting.get = function () {\n        return this.uniforms.vignetting;\n    };\n\n    /**\n     * Amount of opacity of vignette\n     *\n     * @member {number}\n     * @default 0\n     */\n    prototypeAccessors.vignettingAlpha.set = function (value) {\n        this.uniforms.vignettingAlpha = value;\n    };\n    prototypeAccessors.vignettingAlpha.get = function () {\n        return this.uniforms.vignettingAlpha;\n    };\n\n    /**\n     * Blur intensity of the vignette\n     *\n     * @member {number}\n     * @default 0\n     */\n    prototypeAccessors.vignettingBlur.set = function (value) {\n        this.uniforms.vignettingBlur = value;\n    };\n    prototypeAccessors.vignettingBlur.get = function () {\n        return this.uniforms.vignettingBlur;\n    };\n\n    Object.defineProperties( CRTFilter.prototype, prototypeAccessors );\n\n    return CRTFilter;\n}(Filter));\n\nexport { CRTFilter };\n//# sourceMappingURL=filter-crt.esm.js.map\n","/*!\n * @pixi/filter-dot - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-dot is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"precision mediump float;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nuniform vec4 filterArea;\\nuniform sampler2D uSampler;\\n\\nuniform float angle;\\nuniform float scale;\\n\\nfloat pattern()\\n{\\n   float s = sin(angle), c = cos(angle);\\n   vec2 tex = vTextureCoord * filterArea.xy;\\n   vec2 point = vec2(\\n       c * tex.x - s * tex.y,\\n       s * tex.x + c * tex.y\\n   ) * scale;\\n   return (sin(point.x) * sin(point.y)) * 4.0;\\n}\\n\\nvoid main()\\n{\\n   vec4 color = texture2D(uSampler, vTextureCoord);\\n   float average = (color.r + color.g + color.b) / 3.0;\\n   gl_FragColor = vec4(vec3(average * 10.0 - 5.0 + pattern()), color.a);\\n}\\n\";\n\n/**\n * @author Mat Groves http://matgroves.com/ @Doormat23\n * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/fun/dotscreen.js\n */\n\n/**\n * This filter applies a dotscreen effect making display objects appear to be made out of\n * black and white halftone dots like an old printer.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/dot.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-dot|@pixi/filter-dot}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {number} [scale=1] The scale of the effect.\n * @param {number} [angle=5] The radius of the effect.\n */\nvar DotFilter = /*@__PURE__*/(function (Filter) {\n    function DotFilter(scale, angle) {\n        if ( scale === void 0 ) scale = 1;\n        if ( angle === void 0 ) angle = 5;\n\n        Filter.call(this, vertex, fragment);\n        this.scale = scale;\n        this.angle = angle;\n    }\n\n    if ( Filter ) DotFilter.__proto__ = Filter;\n    DotFilter.prototype = Object.create( Filter && Filter.prototype );\n    DotFilter.prototype.constructor = DotFilter;\n\n    var prototypeAccessors = { scale: { configurable: true },angle: { configurable: true } };\n\n    /**\n     * The scale of the effect.\n     * @member {number}\n     * @default 1\n     */\n    prototypeAccessors.scale.get = function () {\n        return this.uniforms.scale;\n    };\n    prototypeAccessors.scale.set = function (value) {\n        this.uniforms.scale = value;\n    };\n\n    /**\n     * The radius of the effect.\n     * @member {number}\n     * @default 5\n     */\n    prototypeAccessors.angle.get = function () {\n        return this.uniforms.angle;\n    };\n    prototypeAccessors.angle.set = function (value) {\n        this.uniforms.angle = value;\n    };\n\n    Object.defineProperties( DotFilter.prototype, prototypeAccessors );\n\n    return DotFilter;\n}(Filter));\n\nexport { DotFilter };\n//# sourceMappingURL=filter-dot.esm.js.map\n","/*!\n * @pixi/filter-drop-shadow - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-drop-shadow is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { KawaseBlurFilter } from '@pixi/filter-kawase-blur';\nimport { Filter } from '@pixi/core';\nimport { settings } from '@pixi/settings';\nimport { DEG_TO_RAD, Point } from '@pixi/math';\nimport { rgb2hex, hex2rgb } from '@pixi/utils';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"varying vec2 vTextureCoord;\\nuniform sampler2D uSampler;\\nuniform float alpha;\\nuniform vec3 color;\\n\\nuniform vec2 shift;\\nuniform vec4 inputSize;\\n\\nvoid main(void){\\n    vec4 sample = texture2D(uSampler, vTextureCoord - shift * inputSize.zw);\\n\\n    // Un-premultiply alpha before applying the color\\n    if (sample.a > 0.0) {\\n        sample.rgb /= sample.a;\\n    }\\n\\n    // Premultiply alpha again\\n    sample.rgb = color.rgb * sample.a;\\n\\n    // alpha user alpha\\n    sample *= alpha;\\n\\n    gl_FragColor = sample;\\n}\";\n\n/**\n * Drop shadow filter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/drop-shadow.png)\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-drop-shadow|@pixi/filter-drop-shadow}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {object} [options] Filter options\n * @param {number} [options.rotation=45] The angle of the shadow in degrees.\n * @param {number} [options.distance=5] Distance of shadow\n * @param {number} [options.color=0x000000] Color of the shadow\n * @param {number} [options.alpha=0.5] Alpha of the shadow\n * @param {number} [options.shadowOnly=false] Whether render shadow only\n * @param {number} [options.blur=2] - Sets the strength of the Blur properties simultaneously\n * @param {number} [options.quality=3] - The quality of the Blur filter.\n * @param {number[]} [options.kernels=null] - The kernels of the Blur filter.\n * @param {number|number[]|PIXI.Point} [options.pixelSize=1] - the pixelSize of the Blur filter.\n * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution of the Blur filter.\n */\nvar DropShadowFilter = /*@__PURE__*/(function (Filter) {\n    function DropShadowFilter(options) {\n\n        // Fallback support for ctor: (rotation, distance, blur, color, alpha)\n        if (options && options.constructor !== Object) {\n            // eslint-disable-next-line no-console\n            console.warn('DropShadowFilter now uses options instead of (rotation, distance, blur, color, alpha)');\n            options = { rotation: options };\n            if (arguments[1] !== undefined) {\n                options.distance = arguments[1];\n            }\n            if (arguments[2] !== undefined) {\n                options.blur = arguments[2];\n            }\n            if (arguments[3] !== undefined) {\n                options.color = arguments[3];\n            }\n            if (arguments[4] !== undefined) {\n                options.alpha = arguments[4];\n            }\n        }\n\n        options = Object.assign({\n            rotation: 45,\n            distance: 5,\n            color: 0x000000,\n            alpha: 0.5,\n            shadowOnly: false,\n            kernels: null,\n            blur: 2,\n            quality: 3,\n            pixelSize: 1,\n            resolution: settings.RESOLUTION,\n        }, options);\n\n        Filter.call(this);\n\n        var kernels = options.kernels;\n        var blur = options.blur;\n        var quality = options.quality;\n        var pixelSize = options.pixelSize;\n        var resolution = options.resolution;\n\n        this._tintFilter = new Filter(vertex, fragment);\n        this._tintFilter.uniforms.color = new Float32Array(4);\n        this._tintFilter.uniforms.shift = new Point();\n        this._tintFilter.resolution = resolution;\n        this._blurFilter = kernels ?\n            new KawaseBlurFilter(kernels) :\n            new KawaseBlurFilter(blur, quality);\n\n        this.pixelSize = pixelSize;\n        this.resolution = resolution;\n\n        var shadowOnly = options.shadowOnly;\n        var rotation = options.rotation;\n        var distance = options.distance;\n        var alpha = options.alpha;\n        var color = options.color;\n\n        this.shadowOnly = shadowOnly;\n        this.rotation = rotation;\n        this.distance = distance;\n        this.alpha = alpha;\n        this.color = color;\n\n        this._updatePadding();\n    }\n\n    if ( Filter ) DropShadowFilter.__proto__ = Filter;\n    DropShadowFilter.prototype = Object.create( Filter && Filter.prototype );\n    DropShadowFilter.prototype.constructor = DropShadowFilter;\n\n    var prototypeAccessors = { resolution: { configurable: true },distance: { configurable: true },rotation: { configurable: true },alpha: { configurable: true },color: { configurable: true },kernels: { configurable: true },blur: { configurable: true },quality: { configurable: true },pixelSize: { configurable: true } };\n\n    DropShadowFilter.prototype.apply = function apply (filterManager, input, output, clear) {\n        var target = filterManager.getFilterTexture();\n\n        this._tintFilter.apply(filterManager, input, target, true);\n        this._blurFilter.apply(filterManager, target, output, clear);\n\n        if (this.shadowOnly !== true) {\n            filterManager.applyFilter(this, input, output, false);\n        }\n\n        filterManager.returnFilterTexture(target);\n    };\n\n    /**\n     * Recalculate the proper padding amount.\n     * @private\n     */\n    DropShadowFilter.prototype._updatePadding = function _updatePadding () {\n        this.padding = this.distance + (this.blur * 2);\n    };\n\n    /**\n     * Update the transform matrix of offset angle.\n     * @private\n     */\n    DropShadowFilter.prototype._updateShift = function _updateShift () {\n        this._tintFilter.uniforms.shift.set(\n            this.distance * Math.cos(this.angle),\n            this.distance * Math.sin(this.angle)\n        );\n    };\n\n    /**\n     * The resolution of the filter.\n     *\n     * @member {number}\n     * @default PIXI.settings.RESOLUTION\n     */\n    prototypeAccessors.resolution.get = function () {\n        return this._resolution;\n    };\n    prototypeAccessors.resolution.set = function (value) {\n        this._resolution = value;\n\n        if (this._tintFilter) {\n            this._tintFilter.resolution = value;\n        }\n        if (this._blurFilter) {\n            this._blurFilter.resolution = value;\n        }\n    };\n\n    /**\n     * Distance offset of the shadow\n     * @member {number}\n     * @default 5\n     */\n    prototypeAccessors.distance.get = function () {\n        return this._distance;\n    };\n    prototypeAccessors.distance.set = function (value) {\n        this._distance = value;\n        this._updatePadding();\n        this._updateShift();\n    };\n\n    /**\n     * The angle of the shadow in degrees\n     * @member {number}\n     * @default 2\n     */\n    prototypeAccessors.rotation.get = function () {\n        return this.angle / DEG_TO_RAD;\n    };\n    prototypeAccessors.rotation.set = function (value) {\n        this.angle = value * DEG_TO_RAD;\n        this._updateShift();\n    };\n\n    /**\n     * The alpha of the shadow\n     * @member {number}\n     * @default 1\n     */\n    prototypeAccessors.alpha.get = function () {\n        return this._tintFilter.uniforms.alpha;\n    };\n    prototypeAccessors.alpha.set = function (value) {\n        this._tintFilter.uniforms.alpha = value;\n    };\n\n    /**\n     * The color of the shadow.\n     * @member {number}\n     * @default 0x000000\n     */\n    prototypeAccessors.color.get = function () {\n        return rgb2hex(this._tintFilter.uniforms.color);\n    };\n    prototypeAccessors.color.set = function (value) {\n        hex2rgb(value, this._tintFilter.uniforms.color);\n    };\n\n    /**\n     * Sets the kernels of the Blur Filter\n     *\n     * @member {number[]}\n     */\n    prototypeAccessors.kernels.get = function () {\n        return this._blurFilter.kernels;\n    };\n    prototypeAccessors.kernels.set = function (value) {\n        this._blurFilter.kernels = value;\n    };\n\n    /**\n     * The blur of the shadow\n     * @member {number}\n     * @default 2\n     */\n    prototypeAccessors.blur.get = function () {\n        return this._blurFilter.blur;\n    };\n    prototypeAccessors.blur.set = function (value) {\n        this._blurFilter.blur = value;\n        this._updatePadding();\n    };\n\n    /**\n     * Sets the quality of the Blur Filter\n     *\n     * @member {number}\n     * @default 4\n     */\n    prototypeAccessors.quality.get = function () {\n        return this._blurFilter.quality;\n    };\n    prototypeAccessors.quality.set = function (value) {\n        this._blurFilter.quality = value;\n    };\n\n    /**\n     * Sets the pixelSize of the Kawase Blur filter\n     *\n     * @member {number|number[]|PIXI.Point}\n     * @default 1\n     */\n    prototypeAccessors.pixelSize.get = function () {\n        return this._blurFilter.pixelSize;\n    };\n    prototypeAccessors.pixelSize.set = function (value) {\n        this._blurFilter.pixelSize = value;\n    };\n\n    Object.defineProperties( DropShadowFilter.prototype, prototypeAccessors );\n\n    return DropShadowFilter;\n}(Filter));\n\nexport { DropShadowFilter };\n//# sourceMappingURL=filter-drop-shadow.esm.js.map\n","/*!\n * @pixi/filter-emboss - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-emboss is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"precision mediump float;\\n\\nvarying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\nuniform float strength;\\nuniform vec4 filterArea;\\n\\n\\nvoid main(void)\\n{\\n\\tvec2 onePixel = vec2(1.0 / filterArea);\\n\\n\\tvec4 color;\\n\\n\\tcolor.rgb = vec3(0.5);\\n\\n\\tcolor -= texture2D(uSampler, vTextureCoord - onePixel) * strength;\\n\\tcolor += texture2D(uSampler, vTextureCoord + onePixel) * strength;\\n\\n\\tcolor.rgb = vec3((color.r + color.g + color.b) / 3.0);\\n\\n\\tfloat alpha = texture2D(uSampler, vTextureCoord).a;\\n\\n\\tgl_FragColor = vec4(color.rgb * alpha, alpha);\\n}\\n\";\n\n/**\n * An RGB Split Filter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/emboss.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-emboss|@pixi/filter-emboss}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {number} [strength=5] Strength of the emboss.\n */\nvar EmbossFilter = /*@__PURE__*/(function (Filter) {\n    function EmbossFilter(strength){\n        if ( strength === void 0 ) strength = 5;\n\n        Filter.call(this, vertex, fragment);\n        this.strength = strength;\n    }\n\n    if ( Filter ) EmbossFilter.__proto__ = Filter;\n    EmbossFilter.prototype = Object.create( Filter && Filter.prototype );\n    EmbossFilter.prototype.constructor = EmbossFilter;\n\n    var prototypeAccessors = { strength: { configurable: true } };\n\n    /**\n     * Strength of emboss.\n     *\n     * @member {number}\n     */\n    prototypeAccessors.strength.get = function () {\n        return this.uniforms.strength;\n    };\n    prototypeAccessors.strength.set = function (value) {\n        this.uniforms.strength = value;\n    };\n\n    Object.defineProperties( EmbossFilter.prototype, prototypeAccessors );\n\n    return EmbossFilter;\n}(Filter));\n\nexport { EmbossFilter };\n//# sourceMappingURL=filter-emboss.esm.js.map\n","/*!\n * @pixi/filter-glitch - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-glitch is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter, Texture } from '@pixi/core';\nimport { SCALE_MODES } from '@pixi/constants';\nimport { DEG_TO_RAD } from '@pixi/math';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"// precision highp float;\\n\\nvarying vec2 vTextureCoord;\\nuniform sampler2D uSampler;\\n\\nuniform vec4 filterArea;\\nuniform vec4 filterClamp;\\nuniform vec2 dimensions;\\nuniform float aspect;\\n\\nuniform sampler2D displacementMap;\\nuniform float offset;\\nuniform float sinDir;\\nuniform float cosDir;\\nuniform int fillMode;\\n\\nuniform float seed;\\nuniform vec2 red;\\nuniform vec2 green;\\nuniform vec2 blue;\\n\\nconst int TRANSPARENT = 0;\\nconst int ORIGINAL = 1;\\nconst int LOOP = 2;\\nconst int CLAMP = 3;\\nconst int MIRROR = 4;\\n\\nvoid main(void)\\n{\\n    vec2 coord = (vTextureCoord * filterArea.xy) / dimensions;\\n\\n    if (coord.x > 1.0 || coord.y > 1.0) {\\n        return;\\n    }\\n\\n    float cx = coord.x - 0.5;\\n    float cy = (coord.y - 0.5) * aspect;\\n    float ny = (-sinDir * cx + cosDir * cy) / aspect + 0.5;\\n\\n    // displacementMap: repeat\\n    // ny = ny > 1.0 ? ny - 1.0 : (ny < 0.0 ? 1.0 + ny : ny);\\n\\n    // displacementMap: mirror\\n    ny = ny > 1.0 ? 2.0 - ny : (ny < 0.0 ? -ny : ny);\\n\\n    vec4 dc = texture2D(displacementMap, vec2(0.5, ny));\\n\\n    float displacement = (dc.r - dc.g) * (offset / filterArea.x);\\n\\n    coord = vTextureCoord + vec2(cosDir * displacement, sinDir * displacement * aspect);\\n\\n    if (fillMode == CLAMP) {\\n        coord = clamp(coord, filterClamp.xy, filterClamp.zw);\\n    } else {\\n        if( coord.x > filterClamp.z ) {\\n            if (fillMode == TRANSPARENT) {\\n                discard;\\n            } else if (fillMode == LOOP) {\\n                coord.x -= filterClamp.z;\\n            } else if (fillMode == MIRROR) {\\n                coord.x = filterClamp.z * 2.0 - coord.x;\\n            }\\n        } else if( coord.x < filterClamp.x ) {\\n            if (fillMode == TRANSPARENT) {\\n                discard;\\n            } else if (fillMode == LOOP) {\\n                coord.x += filterClamp.z;\\n            } else if (fillMode == MIRROR) {\\n                coord.x *= -filterClamp.z;\\n            }\\n        }\\n\\n        if( coord.y > filterClamp.w ) {\\n            if (fillMode == TRANSPARENT) {\\n                discard;\\n            } else if (fillMode == LOOP) {\\n                coord.y -= filterClamp.w;\\n            } else if (fillMode == MIRROR) {\\n                coord.y = filterClamp.w * 2.0 - coord.y;\\n            }\\n        } else if( coord.y < filterClamp.y ) {\\n            if (fillMode == TRANSPARENT) {\\n                discard;\\n            } else if (fillMode == LOOP) {\\n                coord.y += filterClamp.w;\\n            } else if (fillMode == MIRROR) {\\n                coord.y *= -filterClamp.w;\\n            }\\n        }\\n    }\\n\\n    gl_FragColor.r = texture2D(uSampler, coord + red * (1.0 - seed * 0.4) / filterArea.xy).r;\\n    gl_FragColor.g = texture2D(uSampler, coord + green * (1.0 - seed * 0.3) / filterArea.xy).g;\\n    gl_FragColor.b = texture2D(uSampler, coord + blue * (1.0 - seed * 0.2) / filterArea.xy).b;\\n    gl_FragColor.a = texture2D(uSampler, coord).a;\\n}\\n\";\n\n/**\n * The GlitchFilter applies a glitch effect to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/glitch.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-glitch|@pixi/filter-glitch}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {object} [options] - The more optional parameters of the filter.\n * @param {number} [options.slices=5] - The maximum number of slices.\n * @param {number} [options.offset=100] - The maximum offset amount of slices.\n * @param {number} [options.direction=0] - The angle in degree of the offset of slices.\n * @param {number} [options.fillMode=0] - The fill mode of the space after the offset. Acceptable values:\n *  - `0` {@link PIXI.filters.GlitchFilter.TRANSPARENT TRANSPARENT}\n *  - `1` {@link PIXI.filters.GlitchFilter.ORIGINAL ORIGINAL}\n *  - `2` {@link PIXI.filters.GlitchFilter.LOOP LOOP}\n *  - `3` {@link PIXI.filters.GlitchFilter.CLAMP CLAMP}\n *  - `4` {@link PIXI.filters.GlitchFilter.MIRROR MIRROR}\n * @param {number} [options.seed=0] - A seed value for randomizing glitch effect.\n * @param {number} [options.average=false] - `true` will divide the bands roughly based on equal amounts\n *                 where as setting to `false` will vary the band sizes dramatically (more random looking).\n * @param {number} [options.minSize=8] - Minimum size of individual slice. Segment of total `sampleSize`\n * @param {number} [options.sampleSize=512] - The resolution of the displacement map texture.\n * @param {number} [options.red=[0,0]] - Red channel offset\n * @param {number} [options.green=[0,0]] - Green channel offset.\n * @param {number} [options.blue=[0,0]] - Blue channel offset.\n */\nvar GlitchFilter = /*@__PURE__*/(function (Filter) {\n    function GlitchFilter(options) {\n        if ( options === void 0 ) options = {};\n\n\n        Filter.call(this, vertex, fragment);\n        this.uniforms.dimensions = new Float32Array(2);\n\n        options = Object.assign({\n            slices: 5,\n            offset: 100,\n            direction: 0,\n            fillMode: 0,\n            average: false,\n            seed: 0,\n            red: [0, 0],\n            green: [0, 0],\n            blue: [0, 0],\n            minSize: 8,\n            sampleSize: 512,\n        }, options);\n\n        this.direction = options.direction;\n        this.red = options.red;\n        this.green = options.green;\n        this.blue = options.blue;\n\n        /**\n         * The maximum offset value for each of the slices.\n         *\n         * @member {number}\n         */\n        this.offset = options.offset;\n\n        /**\n         * The fill mode of the space after the offset.\n         *\n         * @member {number}\n         */\n        this.fillMode = options.fillMode;\n\n        /**\n         * `true` will divide the bands roughly based on equal amounts\n         * where as setting to `false` will vary the band sizes dramatically (more random looking).\n         *\n         * @member {boolean}\n         * @default false\n         */\n        this.average = options.average;\n\n        /**\n         * A seed value for randomizing color offset. Animating\n         * this value to `Math.random()` produces a twitching effect.\n         *\n         * @member {number}\n         */\n        this.seed = options.seed;\n\n        /**\n         * Minimum size of slices as a portion of the `sampleSize`\n         *\n         * @member {number}\n         */\n        this.minSize = options.minSize;\n\n        /**\n         * Height of the displacement map canvas.\n         *\n         * @member {number}\n         * @readonly\n         */\n        this.sampleSize = options.sampleSize;\n\n        /**\n         * Internally generated canvas.\n         *\n         * @member {HTMLCanvasElement} _canvas\n         * @private\n         */\n        this._canvas = document.createElement('canvas');\n        this._canvas.width = 4;\n        this._canvas.height = this.sampleSize;\n\n        /**\n         * The displacement map is used to generate the bands.\n         * If using your own texture, `slices` will be ignored.\n         *\n         * @member {PIXI.Texture}\n         * @readonly\n         */\n        this.texture = Texture.from(this._canvas, { scaleMode: SCALE_MODES.NEAREST });\n\n        /**\n         * Internal number of slices\n         * @member {number}\n         * @private\n         */\n        this._slices = 0;\n\n        // Set slices\n        this.slices = options.slices;\n    }\n\n    if ( Filter ) GlitchFilter.__proto__ = Filter;\n    GlitchFilter.prototype = Object.create( Filter && Filter.prototype );\n    GlitchFilter.prototype.constructor = GlitchFilter;\n\n    var prototypeAccessors = { sizes: { configurable: true },offsets: { configurable: true },slices: { configurable: true },direction: { configurable: true },red: { configurable: true },green: { configurable: true },blue: { configurable: true } };\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    GlitchFilter.prototype.apply = function apply (filterManager, input, output, clear) {\n\n        var width = input.filterFrame.width;\n        var height = input.filterFrame.height;\n\n        this.uniforms.dimensions[0] = width;\n        this.uniforms.dimensions[1] = height;\n        this.uniforms.aspect = height / width;\n\n        this.uniforms.seed = this.seed;\n        this.uniforms.offset = this.offset;\n        this.uniforms.fillMode = this.fillMode;\n\n        filterManager.applyFilter(this, input, output, clear);\n    };\n\n    /**\n     * Randomize the slices size (heights).\n     *\n     * @private\n     */\n    GlitchFilter.prototype._randomizeSizes = function _randomizeSizes () {\n        var arr = this._sizes;\n        var last = this._slices - 1;\n        var size = this.sampleSize;\n        var min = Math.min(this.minSize / size, 0.9 / this._slices);\n\n        if (this.average) {\n            var count = this._slices;\n            var rest = 1;\n\n            for (var i = 0; i < last; i++) {\n                var averageWidth = rest / (count - i);\n                var w =  Math.max(averageWidth * (1 - Math.random() * 0.6), min);\n                arr[i] = w;\n                rest -= w;\n            }\n            arr[last] = rest;\n        }\n        else {\n            var rest$1 = 1;\n            var ratio = Math.sqrt(1 / this._slices);\n\n            for (var i$1 = 0; i$1 < last; i$1++) {\n                var w$1 = Math.max(ratio * rest$1 * Math.random(), min);\n                arr[i$1] = w$1;\n                rest$1 -= w$1;\n            }\n            arr[last] = rest$1;\n        }\n\n        this.shuffle();\n    };\n\n    /**\n     * Shuffle the sizes of the slices, advanced usage.\n     */\n    GlitchFilter.prototype.shuffle = function shuffle () {\n        var arr = this._sizes;\n        var last = this._slices - 1;\n\n        // shuffle\n        for (var i = last; i > 0; i--) {\n            var rand = (Math.random() * i) >> 0;\n            var temp = arr[i];\n\n            arr[i] = arr[rand];\n            arr[rand] = temp;\n        }\n    };\n\n    /**\n     * Randomize the values for offset from -1 to 1\n     *\n     * @private\n     */\n    GlitchFilter.prototype._randomizeOffsets = function _randomizeOffsets () {\n        for (var i = 0 ; i < this._slices; i++) {\n            this._offsets[i] = Math.random() * (Math.random() < 0.5 ? -1 : 1);\n        }\n    };\n\n    /**\n     * Regenerating random size, offsets for slices.\n     */\n    GlitchFilter.prototype.refresh = function refresh () {\n        this._randomizeSizes();\n        this._randomizeOffsets();\n        this.redraw();\n    };\n\n    /**\n     * Redraw displacement bitmap texture, advanced usage.\n     */\n    GlitchFilter.prototype.redraw = function redraw () {\n        var size = this.sampleSize;\n        var texture = this.texture;\n        var ctx = this._canvas.getContext('2d');\n        ctx.clearRect(0, 0, 8, size);\n\n        var offset;\n        var y = 0;\n\n        for (var i = 0 ; i < this._slices; i++) {\n            offset = Math.floor(this._offsets[i] * 256);\n            var height = this._sizes[i] * size;\n            var red = offset > 0 ? offset : 0;\n            var green = offset < 0 ? -offset : 0;\n            ctx.fillStyle = 'rgba(' + red + ', ' + green + ', 0, 1)';\n            ctx.fillRect(0, y >> 0, size, height + 1 >> 0);\n            y += height;\n        }\n\n        texture.baseTexture.update();\n        this.uniforms.displacementMap = texture;\n    };\n\n    /**\n     * Manually custom slices size (height) of displacement bitmap\n     *\n     * @member {number[]}\n     */\n    prototypeAccessors.sizes.set = function (sizes) {\n        var len = Math.min(this._slices, sizes.length);\n\n        for (var i = 0; i < len; i++){\n            this._sizes[i] = sizes[i];\n        }\n    };\n    prototypeAccessors.sizes.get = function () {\n        return this._sizes;\n    };\n\n    /**\n     * Manually set custom slices offset of displacement bitmap, this is\n     * a collection of values from -1 to 1. To change the max offset value\n     * set `offset`.\n     *\n     * @member {number[]}\n     */\n    prototypeAccessors.offsets.set = function (offsets) {\n        var len = Math.min(this._slices, offsets.length);\n\n        for (var i = 0; i < len; i++){\n            this._offsets[i] = offsets[i];\n        }\n    };\n    prototypeAccessors.offsets.get = function () {\n        return this._offsets;\n    };\n\n    /**\n     * The count of slices.\n     * @member {number}\n     * @default 5\n     */\n    prototypeAccessors.slices.get = function () {\n        return this._slices;\n    };\n    prototypeAccessors.slices.set = function (value) {\n        if (this._slices === value) {\n            return;\n        }\n        this._slices = value;\n        this.uniforms.slices = value;\n        this._sizes = this.uniforms.slicesWidth = new Float32Array(value);\n        this._offsets = this.uniforms.slicesOffset = new Float32Array(value);\n        this.refresh();\n    };\n\n    /**\n     * The angle in degree of the offset of slices.\n     * @member {number}\n     * @default 0\n     */\n    prototypeAccessors.direction.get = function () {\n        return this._direction;\n    };\n    prototypeAccessors.direction.set = function (value) {\n        if (this._direction === value) {\n            return;\n        }\n        this._direction = value;\n\n        var radians = value * DEG_TO_RAD;\n\n        this.uniforms.sinDir = Math.sin(radians);\n        this.uniforms.cosDir = Math.cos(radians);\n    };\n\n    /**\n     * Red channel offset.\n     *\n     * @member {PIXI.Point}\n     */\n    prototypeAccessors.red.get = function () {\n        return this.uniforms.red;\n    };\n    prototypeAccessors.red.set = function (value) {\n        this.uniforms.red = value;\n    };\n\n    /**\n     * Green channel offset.\n     *\n     * @member {PIXI.Point}\n     */\n    prototypeAccessors.green.get = function () {\n        return this.uniforms.green;\n    };\n    prototypeAccessors.green.set = function (value) {\n        this.uniforms.green = value;\n    };\n\n    /**\n     * Blue offset.\n     *\n     * @member {PIXI.Point}\n     */\n    prototypeAccessors.blue.get = function () {\n        return this.uniforms.blue;\n    };\n    prototypeAccessors.blue.set = function (value) {\n        this.uniforms.blue = value;\n    };\n\n    /**\n     * Removes all references\n     */\n    GlitchFilter.prototype.destroy = function destroy () {\n        this.texture.destroy(true);\n        this.texture = null;\n        this._canvas = null;\n        this.red = null;\n        this.green = null;\n        this.blue = null;\n        this._sizes = null;\n        this._offsets = null;\n    };\n\n    Object.defineProperties( GlitchFilter.prototype, prototypeAccessors );\n\n    return GlitchFilter;\n}(Filter));\n\n/**\n * Fill mode as transparent\n *\n * @constant\n * @static\n * @member {int} TRANSPARENT\n * @memberof PIXI.filters.GlitchFilter\n * @readonly\n */\nGlitchFilter.TRANSPARENT = 0;\n\n/**\n * Fill mode as original\n *\n * @constant\n * @static\n * @member {int} ORIGINAL\n * @memberof PIXI.filters.GlitchFilter\n * @readonly\n */\nGlitchFilter.ORIGINAL = 1;\n\n/**\n * Fill mode as loop\n *\n * @constant\n * @static\n * @member {int} LOOP\n * @memberof PIXI.filters.GlitchFilter\n * @readonly\n */\nGlitchFilter.LOOP = 2;\n\n/**\n * Fill mode as clamp\n *\n * @constant\n * @static\n * @member {int} CLAMP\n * @memberof PIXI.filters.GlitchFilter\n * @readonly\n */\nGlitchFilter.CLAMP = 3;\n\n/**\n * Fill mode as mirror\n *\n * @constant\n * @static\n * @member {int} MIRROR\n * @memberof PIXI.filters.GlitchFilter\n * @readonly\n */\nGlitchFilter.MIRROR = 4;\n\nexport { GlitchFilter };\n//# sourceMappingURL=filter-glitch.esm.js.map\n","/*!\n * @pixi/filter-glow - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-glow is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\nimport { rgb2hex, hex2rgb } from '@pixi/utils';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"varying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uSampler;\\n\\nuniform float distance;\\nuniform float outerStrength;\\nuniform float innerStrength;\\nuniform vec4 glowColor;\\nuniform vec4 filterArea;\\nuniform vec4 filterClamp;\\nconst float PI = 3.14159265358979323846264;\\n\\nvoid main(void) {\\n    vec2 px = vec2(1.0 / filterArea.x, 1.0 / filterArea.y);\\n    vec4 ownColor = texture2D(uSampler, vTextureCoord);\\n    vec4 curColor;\\n    float totalAlpha = 0.0;\\n    float maxTotalAlpha = 0.0;\\n    float cosAngle;\\n    float sinAngle;\\n    vec2 displaced;\\n    for (float angle = 0.0; angle <= PI * 2.0; angle += %QUALITY_DIST%) {\\n       cosAngle = cos(angle);\\n       sinAngle = sin(angle);\\n       for (float curDistance = 1.0; curDistance <= %DIST%; curDistance++) {\\n           displaced.x = vTextureCoord.x + cosAngle * curDistance * px.x;\\n           displaced.y = vTextureCoord.y + sinAngle * curDistance * px.y;\\n           curColor = texture2D(uSampler, clamp(displaced, filterClamp.xy, filterClamp.zw));\\n           totalAlpha += (distance - curDistance) * curColor.a;\\n           maxTotalAlpha += (distance - curDistance);\\n       }\\n    }\\n    maxTotalAlpha = max(maxTotalAlpha, 0.0001);\\n\\n    ownColor.a = max(ownColor.a, 0.0001);\\n    ownColor.rgb = ownColor.rgb / ownColor.a;\\n    float outerGlowAlpha = (totalAlpha / maxTotalAlpha)  * outerStrength * (1. - ownColor.a);\\n    float innerGlowAlpha = ((maxTotalAlpha - totalAlpha) / maxTotalAlpha) * innerStrength * ownColor.a;\\n    float resultAlpha = (ownColor.a + outerGlowAlpha);\\n    gl_FragColor = vec4(mix(mix(ownColor.rgb, glowColor.rgb, innerGlowAlpha / ownColor.a), glowColor.rgb, outerGlowAlpha / resultAlpha) * resultAlpha, resultAlpha);\\n}\\n\";\n\n/**\n * GlowFilter, originally by mishaa\n * http://www.html5gamedevs.com/topic/12756-glow-filter/?hl=mishaa#entry73578\n * http://codepen.io/mishaa/pen/raKzrm<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/glow.png)\n *\n * @class\n *\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-glow|@pixi/filter-glow}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {number} [distance=10] The distance of the glow. Make it 2 times more for resolution=2. It cant be changed after filter creation\n * @param {number} [outerStrength=4] The strength of the glow outward from the edge of the sprite.\n * @param {number} [innerStrength=0] The strength of the glow inward from the edge of the sprite.\n * @param {number} [color=0xffffff] The color of the glow.\n * @param {number} [quality=0.1] A number between 0 and 1 that describes the quality of the glow.\n *\n * @example\n *  someSprite.filters = [\n *      new GlowFilter(15, 2, 1, 0xFF0000, 0.5)\n *  ];\n */\nvar GlowFilter = /*@__PURE__*/(function (Filter) {\n    function GlowFilter(distance, outerStrength, innerStrength, color, quality) {\n        if ( distance === void 0 ) distance = 10;\n        if ( outerStrength === void 0 ) outerStrength = 4;\n        if ( innerStrength === void 0 ) innerStrength = 0;\n        if ( color === void 0 ) color = 0xffffff;\n        if ( quality === void 0 ) quality = 0.1;\n\n        Filter.call(this, vertex, fragment\n            .replace(/%QUALITY_DIST%/gi, '' + (1 / quality / distance).toFixed(7))\n            .replace(/%DIST%/gi, '' + distance.toFixed(7)));\n\n        this.uniforms.glowColor = new Float32Array([0, 0, 0, 1]);\n        this.distance = distance;\n        this.color = color;\n        this.outerStrength = outerStrength;\n        this.innerStrength = innerStrength;\n    }\n\n    if ( Filter ) GlowFilter.__proto__ = Filter;\n    GlowFilter.prototype = Object.create( Filter && Filter.prototype );\n    GlowFilter.prototype.constructor = GlowFilter;\n\n    var prototypeAccessors = { color: { configurable: true },distance: { configurable: true },outerStrength: { configurable: true },innerStrength: { configurable: true } };\n\n    /**\n     * The color of the glow.\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    prototypeAccessors.color.get = function () {\n        return rgb2hex(this.uniforms.glowColor);\n    };\n    prototypeAccessors.color.set = function (value) {\n        hex2rgb(value, this.uniforms.glowColor);\n    };\n\n    /**\n     * The distance of the glow. Make it 2 times more for resolution=2. It cant be changed after filter creation\n     * @member {number}\n     * @default 10\n     */\n    prototypeAccessors.distance.get = function () {\n        return this.uniforms.distance;\n    };\n    prototypeAccessors.distance.set = function (value) {\n        this.uniforms.distance = value;\n    };\n\n    /**\n     * The strength of the glow outward from the edge of the sprite.\n     * @member {number}\n     * @default 4\n     */\n    prototypeAccessors.outerStrength.get = function () {\n        return this.uniforms.outerStrength;\n    };\n    prototypeAccessors.outerStrength.set = function (value) {\n        this.uniforms.outerStrength = value;\n    };\n\n    /**\n     * The strength of the glow inward from the edge of the sprite.\n     * @member {number}\n     * @default 0\n     */\n    prototypeAccessors.innerStrength.get = function () {\n        return this.uniforms.innerStrength;\n    };\n    prototypeAccessors.innerStrength.set = function (value) {\n        this.uniforms.innerStrength = value;\n    };\n\n    Object.defineProperties( GlowFilter.prototype, prototypeAccessors );\n\n    return GlowFilter;\n}(Filter));\n\nexport { GlowFilter };\n//# sourceMappingURL=filter-glow.esm.js.map\n","/*!\n * @pixi/filter-godray - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-godray is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\nimport { Point, DEG_TO_RAD } from '@pixi/math';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar perlin = \"vec3 mod289(vec3 x)\\n{\\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\nvec4 mod289(vec4 x)\\n{\\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\nvec4 permute(vec4 x)\\n{\\n    return mod289(((x * 34.0) + 1.0) * x);\\n}\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n    return 1.79284291400159 - 0.85373472095314 * r;\\n}\\nvec3 fade(vec3 t)\\n{\\n    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\\n}\\n// Classic Perlin noise, periodic variant\\nfloat pnoise(vec3 P, vec3 rep)\\n{\\n    vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\\n    vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\\n    Pi0 = mod289(Pi0);\\n    Pi1 = mod289(Pi1);\\n    vec3 Pf0 = fract(P); // Fractional part for interpolation\\n    vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\\n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\\n    vec4 iz0 = Pi0.zzzz;\\n    vec4 iz1 = Pi1.zzzz;\\n    vec4 ixy = permute(permute(ix) + iy);\\n    vec4 ixy0 = permute(ixy + iz0);\\n    vec4 ixy1 = permute(ixy + iz1);\\n    vec4 gx0 = ixy0 * (1.0 / 7.0);\\n    vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\\n    gx0 = fract(gx0);\\n    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\\n    vec4 sz0 = step(gz0, vec4(0.0));\\n    gx0 -= sz0 * (step(0.0, gx0) - 0.5);\\n    gy0 -= sz0 * (step(0.0, gy0) - 0.5);\\n    vec4 gx1 = ixy1 * (1.0 / 7.0);\\n    vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\\n    gx1 = fract(gx1);\\n    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\\n    vec4 sz1 = step(gz1, vec4(0.0));\\n    gx1 -= sz1 * (step(0.0, gx1) - 0.5);\\n    gy1 -= sz1 * (step(0.0, gy1) - 0.5);\\n    vec3 g000 = vec3(gx0.x, gy0.x, gz0.x);\\n    vec3 g100 = vec3(gx0.y, gy0.y, gz0.y);\\n    vec3 g010 = vec3(gx0.z, gy0.z, gz0.z);\\n    vec3 g110 = vec3(gx0.w, gy0.w, gz0.w);\\n    vec3 g001 = vec3(gx1.x, gy1.x, gz1.x);\\n    vec3 g101 = vec3(gx1.y, gy1.y, gz1.y);\\n    vec3 g011 = vec3(gx1.z, gy1.z, gz1.z);\\n    vec3 g111 = vec3(gx1.w, gy1.w, gz1.w);\\n    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\\n    g000 *= norm0.x;\\n    g010 *= norm0.y;\\n    g100 *= norm0.z;\\n    g110 *= norm0.w;\\n    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\\n    g001 *= norm1.x;\\n    g011 *= norm1.y;\\n    g101 *= norm1.z;\\n    g111 *= norm1.w;\\n    float n000 = dot(g000, Pf0);\\n    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\\n    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\\n    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\\n    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\\n    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\\n    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\\n    float n111 = dot(g111, Pf1);\\n    vec3 fade_xyz = fade(Pf0);\\n    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\\n    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\\n    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\\n    return 2.2 * n_xyz;\\n}\\nfloat turb(vec3 P, vec3 rep, float lacunarity, float gain)\\n{\\n    float sum = 0.0;\\n    float sc = 1.0;\\n    float totalgain = 1.0;\\n    for (float i = 0.0; i < 6.0; i++)\\n    {\\n        sum += totalgain * pnoise(P * sc, rep);\\n        sc *= lacunarity;\\n        totalgain *= gain;\\n    }\\n    return abs(sum);\\n}\\n\";\n\nvar fragment = \"varying vec2 vTextureCoord;\\nuniform sampler2D uSampler;\\nuniform vec4 filterArea;\\nuniform vec2 dimensions;\\n\\nuniform vec2 light;\\nuniform bool parallel;\\nuniform float aspect;\\n\\nuniform float gain;\\nuniform float lacunarity;\\nuniform float time;\\n\\n${perlin}\\n\\nvoid main(void) {\\n    vec2 coord = vTextureCoord * filterArea.xy / dimensions.xy;\\n\\n    float d;\\n\\n    if (parallel) {\\n        float _cos = light.x;\\n        float _sin = light.y;\\n        d = (_cos * coord.x) + (_sin * coord.y * aspect);\\n    } else {\\n        float dx = coord.x - light.x / dimensions.x;\\n        float dy = (coord.y - light.y / dimensions.y) * aspect;\\n        float dis = sqrt(dx * dx + dy * dy) + 0.00001;\\n        d = dy / dis;\\n    }\\n\\n    vec3 dir = vec3(d, d, 0.0);\\n\\n    float noise = turb(dir + vec3(time, 0.0, 62.1 + time) * 0.05, vec3(480.0, 320.0, 480.0), lacunarity, gain);\\n    noise = mix(noise, 0.0, 0.3);\\n    //fade vertically.\\n    vec4 mist = vec4(noise, noise, noise, 1.0) * (1.0 - coord.y);\\n    mist.a = 1.0;\\n\\n    gl_FragColor = texture2D(uSampler, vTextureCoord) + mist;\\n}\\n\";\n\n/**\n * GordayFilter, {@link https://codepen.io/alaingalvan originally} by Alain Galvan\n *\n *\n *\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/godray.gif)\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-godray|@pixi/filter-godray}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n *\n * @example\n *  displayObject.filters = [new GodrayFilter()];\n * @param {object} [options] Filter options\n * @param {number} [options.angle=30] Angle/Light-source of the rays.\n * @param {number} [options.gain=0.5] General intensity of the effect.\n * @param {number} [options.lacunrity=2.5] The density of the fractal noise.\n * @param {boolean} [options.parallel=true] `true` to use `angle`, `false` to use `center`\n * @param {number} [options.time=0] The current time position.\n * @param {PIXI.Point|number[]} [options.center=[0,0]] Focal point for non-parallel rays,\n *        to use this `parallel` must be set to `false`.\n */\nvar GodrayFilter = /*@__PURE__*/(function (Filter) {\n    function GodrayFilter(options) {\n        Filter.call(this, vertex, fragment.replace('${perlin}', perlin));\n\n        this.uniforms.dimensions = new Float32Array(2);\n\n        // Fallback support for ctor: (angle, gain, lacunarity, time)\n        if (typeof options === 'number') {\n            // eslint-disable-next-line no-console\n            console.warn('GodrayFilter now uses options instead of (angle, gain, lacunarity, time)');\n            options = { angle: options };\n            if (arguments[1] !== undefined) {\n                options.gain = arguments[1];\n            }\n            if (arguments[2] !== undefined) {\n                options.lacunarity = arguments[2];\n            }\n            if (arguments[3] !== undefined) {\n                options.time = arguments[3];\n            }\n        }\n\n        options = Object.assign({\n            angle: 30,\n            gain: 0.5,\n            lacunarity: 2.5,\n            time: 0,\n            parallel: true,\n            center: [0, 0],\n        }, options);\n\n        this._angleLight = new Point();\n        this.angle = options.angle;\n        this.gain = options.gain;\n        this.lacunarity = options.lacunarity;\n\n        /**\n         * `true` if light rays are parallel (uses angle),\n         * `false` to use the focal `center` point\n         *\n         * @member {boolean}\n         * @default true\n         */\n        this.parallel = options.parallel;\n\n        /**\n         * The position of the emitting point for light rays\n         * only used if `parallel` is set to `false`.\n         *\n         * @member {PIXI.Point|number[]}\n         * @default [0, 0]\n         */\n        this.center = options.center;\n\n        /**\n         * The current time.\n         *\n         * @member {number}\n         * @default 0\n         */\n        this.time = options.time;\n    }\n\n    if ( Filter ) GodrayFilter.__proto__ = Filter;\n    GodrayFilter.prototype = Object.create( Filter && Filter.prototype );\n    GodrayFilter.prototype.constructor = GodrayFilter;\n\n    var prototypeAccessors = { angle: { configurable: true },gain: { configurable: true },lacunarity: { configurable: true } };\n\n    /**\n     * Applies the filter.\n     * @private\n     * @param {PIXI.FilterManager} filterManager - The manager.\n     * @param {PIXI.RenderTarget} input - The input target.\n     * @param {PIXI.RenderTarget} output - The output target.\n     */\n    GodrayFilter.prototype.apply = function apply (filterManager, input, output, clear) {\n        var ref = input.filterFrame;\n        var width = ref.width;\n        var height = ref.height;\n\n        this.uniforms.light = this.parallel ? this._angleLight : this.center;\n\n        this.uniforms.parallel = this.parallel;\n        this.uniforms.dimensions[0] = width;\n        this.uniforms.dimensions[1] = height;\n        this.uniforms.aspect = height / width;\n        this.uniforms.time = this.time;\n\n        // draw the filter...\n        filterManager.applyFilter(this, input, output, clear);\n    };\n\n    /**\n     * The angle/light-source of the rays in degrees. For instance, a value of 0 is vertical rays,\n     *     values of 90 or -90 produce horizontal rays.\n     * @member {number}\n     * @default 30\n     */\n    prototypeAccessors.angle.get = function () {\n        return this._angle;\n    };\n    prototypeAccessors.angle.set = function (value) {\n        this._angle = value;\n\n        var radians = value * DEG_TO_RAD;\n\n        this._angleLight.x = Math.cos(radians);\n        this._angleLight.y = Math.sin(radians);\n    };\n\n    /**\n     * General intensity of the effect. A value closer to 1 will produce a more intense effect,\n     * where a value closer to 0 will produce a subtler effect.\n     *\n     * @member {number}\n     * @default 0.5\n     */\n    prototypeAccessors.gain.get = function () {\n        return this.uniforms.gain;\n    };\n    prototypeAccessors.gain.set = function (value) {\n        this.uniforms.gain = value;\n    };\n\n    /**\n     * The density of the fractal noise. A higher amount produces more rays and a smaller amound\n     * produces fewer waves.\n     *\n     * @member {number}\n     * @default 2.5\n     */\n    prototypeAccessors.lacunarity.get = function () {\n        return this.uniforms.lacunarity;\n    };\n    prototypeAccessors.lacunarity.set = function (value) {\n        this.uniforms.lacunarity = value;\n    };\n\n    Object.defineProperties( GodrayFilter.prototype, prototypeAccessors );\n\n    return GodrayFilter;\n}(Filter));\n\nexport { GodrayFilter };\n//# sourceMappingURL=filter-godray.esm.js.map\n","/*!\n * @pixi/filter-motion-blur - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-motion-blur is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\nimport { Point, ObservablePoint } from '@pixi/math';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"varying vec2 vTextureCoord;\\nuniform sampler2D uSampler;\\nuniform vec4 filterArea;\\n\\nuniform vec2 uVelocity;\\nuniform int uKernelSize;\\nuniform float uOffset;\\n\\nconst int MAX_KERNEL_SIZE = 2048;\\n\\n// Notice:\\n// the perfect way:\\n//    int kernelSize = min(uKernelSize, MAX_KERNELSIZE);\\n// BUT in real use-case , uKernelSize < MAX_KERNELSIZE almost always.\\n// So use uKernelSize directly.\\n\\nvoid main(void)\\n{\\n    vec4 color = texture2D(uSampler, vTextureCoord);\\n\\n    if (uKernelSize == 0)\\n    {\\n        gl_FragColor = color;\\n        return;\\n    }\\n\\n    vec2 velocity = uVelocity / filterArea.xy;\\n    float offset = -uOffset / length(uVelocity) - 0.5;\\n    int k = uKernelSize - 1;\\n\\n    for(int i = 0; i < MAX_KERNEL_SIZE - 1; i++) {\\n        if (i == k) {\\n            break;\\n        }\\n        vec2 bias = velocity * (float(i) / float(k) + offset);\\n        color += texture2D(uSampler, vTextureCoord + bias);\\n    }\\n    gl_FragColor = color / float(uKernelSize);\\n}\\n\";\n\n/**\n * The MotionBlurFilter applies a Motion blur to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/motion-blur.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-motion-blur|@pixi/filter-motion-blur}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {PIXI.ObservablePoint|PIXI.Point|number[]} [velocity=[0, 0]] Sets the velocity of the motion for blur effect.\n * @param {number} [kernelSize=5] - The kernelSize of the blur filter. Must be odd number >= 5\n * @param {number} [offset=0] - The offset of the blur filter.\n */\nvar MotionBlurFilter = /*@__PURE__*/(function (Filter) {\n    function MotionBlurFilter(velocity, kernelSize, offset) {\n        if ( velocity === void 0 ) velocity = [0, 0];\n        if ( kernelSize === void 0 ) kernelSize = 5;\n        if ( offset === void 0 ) offset = 0;\n\n        Filter.call(this, vertex, fragment);\n        this.uniforms.uVelocity = new Float32Array(2);\n        this._velocity = new ObservablePoint(this.velocityChanged, this);\n        this.velocity = velocity;\n\n        /**\n         * The kernelSize of the blur, higher values are slower but look better.\n         * Use odd value greater than 5.\n         * @member {number}\n         * @default 5\n         */\n        this.kernelSize = kernelSize;\n        this.offset = offset;\n    }\n\n    if ( Filter ) MotionBlurFilter.__proto__ = Filter;\n    MotionBlurFilter.prototype = Object.create( Filter && Filter.prototype );\n    MotionBlurFilter.prototype.constructor = MotionBlurFilter;\n\n    var prototypeAccessors = { velocity: { configurable: true },offset: { configurable: true } };\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    MotionBlurFilter.prototype.apply = function apply (filterManager, input, output, clear) {\n        var ref = this.velocity;\n        var x = ref.x;\n        var y = ref.y;\n\n        this.uniforms.uKernelSize = (x !== 0 || y !== 0) ? this.kernelSize : 0;\n        filterManager.applyFilter(this, input, output, clear);\n    };\n\n    /**\n     * Sets the velocity of the motion for blur effect.\n     *\n     * @member {PIXI.ObservablePoint}\n     */\n    prototypeAccessors.velocity.set = function (value) {\n        if (Array.isArray(value)) {\n            this._velocity.set(value[0], value[1]);\n        }\n        else if (value instanceof Point || value instanceof ObservablePoint) {\n            this._velocity.copy(value);\n        }\n    };\n\n    prototypeAccessors.velocity.get = function () {\n        return this._velocity;\n    };\n\n    /**\n     * Handle velocity changed\n     * @private\n     */\n    MotionBlurFilter.prototype.velocityChanged = function velocityChanged () {\n        this.uniforms.uVelocity[0] = this._velocity.x;\n        this.uniforms.uVelocity[1] = this._velocity.y;\n    };\n\n    /**\n     * The offset of the blur filter.\n     *\n     * @member {number}\n     * @default 0\n     */\n    prototypeAccessors.offset.set = function (value) {\n        this.uniforms.uOffset = value;\n    };\n\n    prototypeAccessors.offset.get = function () {\n        return this.uniforms.uOffset;\n    };\n\n    Object.defineProperties( MotionBlurFilter.prototype, prototypeAccessors );\n\n    return MotionBlurFilter;\n}(Filter));\n\nexport { MotionBlurFilter };\n//# sourceMappingURL=filter-motion-blur.esm.js.map\n","/*!\n * @pixi/filter-multi-color-replace - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-multi-color-replace is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\nimport { hex2rgb, rgb2hex } from '@pixi/utils';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"varying vec2 vTextureCoord;\\nuniform sampler2D uSampler;\\n\\nuniform float epsilon;\\n\\nconst int MAX_COLORS = %maxColors%;\\n\\nuniform vec3 originalColors[MAX_COLORS];\\nuniform vec3 targetColors[MAX_COLORS];\\n\\nvoid main(void)\\n{\\n    gl_FragColor = texture2D(uSampler, vTextureCoord);\\n\\n    float alpha = gl_FragColor.a;\\n    if (alpha < 0.0001)\\n    {\\n      return;\\n    }\\n\\n    vec3 color = gl_FragColor.rgb / alpha;\\n\\n    for(int i = 0; i < MAX_COLORS; i++)\\n    {\\n      vec3 origColor = originalColors[i];\\n      if (origColor.r < 0.0)\\n      {\\n        break;\\n      }\\n      vec3 colorDiff = origColor - color;\\n      if (length(colorDiff) < epsilon)\\n      {\\n        vec3 targetColor = targetColors[i];\\n        gl_FragColor = vec4((targetColor + colorDiff) * alpha, alpha);\\n        return;\\n      }\\n    }\\n}\\n\";\n\n/**\n * Filter for replacing a color with another color. Similar to ColorReplaceFilter, but support multiple\n * colors.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/multi-color-replace.png)\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-multi-color-replace|@pixi/filter-multi-color-replace}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {Array<Array>} replacements - The collection of replacement items. Each item is color-pair (an array length is 2).\n *                       In the pair, the first value is original color , the second value is target color.\n * @param {number} [epsilon=0.05] - Tolerance of the floating-point comparison between colors\n *                                  (lower = more exact, higher = more inclusive)\n * @param {number} [maxColors] - The maximum number of replacements filter is able to use. Because the\n *                               fragment is only compiled once, this cannot be changed after construction.\n *                               If omitted, the default value is the length of `replacements`.\n *\n * @example\n *  // replaces pure red with pure blue, and replaces pure green with pure white\n *  someSprite.filters = [new MultiColorReplaceFilter(\n *    [\n *      [0xFF0000, 0x0000FF],\n *      [0x00FF00, 0xFFFFFF]\n *    ],\n *    0.001\n *  )];\n *\n *  You also could use [R, G, B] as the color\n *  someOtherSprite.filters = [new MultiColorReplaceFilter(\n *    [\n *      [ [1,0,0], [0,0,1] ],\n *      [ [0,1,0], [1,1,1] ]\n *    ],\n *    0.001\n *  )];\n *\n */\nvar MultiColorReplaceFilter = /*@__PURE__*/(function (Filter) {\n    function MultiColorReplaceFilter(replacements, epsilon, maxColors) {\n        if ( epsilon === void 0 ) epsilon = 0.05;\n        if ( maxColors === void 0 ) maxColors = null;\n\n        maxColors = maxColors || replacements.length;\n\n        Filter.call(this, vertex, fragment.replace(/%maxColors%/g, maxColors));\n\n        this.epsilon = epsilon;\n        this._maxColors = maxColors;\n        this._replacements = null;\n        this.uniforms.originalColors = new Float32Array(maxColors * 3);\n        this.uniforms.targetColors = new Float32Array(maxColors * 3);\n        this.replacements = replacements;\n    }\n\n    if ( Filter ) MultiColorReplaceFilter.__proto__ = Filter;\n    MultiColorReplaceFilter.prototype = Object.create( Filter && Filter.prototype );\n    MultiColorReplaceFilter.prototype.constructor = MultiColorReplaceFilter;\n\n    var prototypeAccessors = { replacements: { configurable: true },maxColors: { configurable: true },epsilon: { configurable: true } };\n\n    /**\n     * The source and target colors for replacement. See constructor for information on the format.\n     *\n     * @member {Array<Array>}\n     */\n    prototypeAccessors.replacements.set = function (replacements) {\n        var originals = this.uniforms.originalColors;\n        var targets = this.uniforms.targetColors;\n        var colorCount = replacements.length;\n\n        if (colorCount > this._maxColors) {\n            throw (\"Length of replacements (\" + colorCount + \") exceeds the maximum colors length (\" + (this._maxColors) + \")\");\n        }\n\n        // Fill with negative values\n        originals[colorCount * 3] = -1;\n\n        for (var i = 0; i < colorCount; i++) {\n            var pair = replacements[i];\n\n            // for original colors\n            var color = pair[0];\n            if (typeof color === 'number') {\n                color = hex2rgb(color);\n            }\n            else {\n                pair[0] = rgb2hex(color);\n            }\n\n            originals[i * 3] = color[0];\n            originals[(i * 3) + 1] = color[1];\n            originals[(i * 3) + 2] = color[2];\n\n            // for target colors\n            var targetColor = pair[1];\n            if (typeof targetColor === 'number') {\n                targetColor = hex2rgb(targetColor);\n            }\n            else {\n                pair[1] = rgb2hex(targetColor);\n            }\n\n            targets[i * 3] = targetColor[0];\n            targets[(i * 3) + 1] = targetColor[1];\n            targets[(i * 3) + 2] = targetColor[2];\n        }\n\n        this._replacements = replacements;\n    };\n    prototypeAccessors.replacements.get = function () {\n        return this._replacements;\n    };\n\n    /**\n     * Should be called after changing any of the contents of the replacements.\n     * This is a convenience method for resetting the `replacements`.\n     */\n    MultiColorReplaceFilter.prototype.refresh = function refresh () {\n        this.replacements = this._replacements;\n    };\n\n    /**\n     * The maximum number of color replacements supported by this filter. Can be changed\n     * _only_ during construction.\n     *\n     * @member {number}\n     * @readonly\n     */\n    prototypeAccessors.maxColors.get = function () {\n        return this._maxColors;\n    };\n\n    /**\n     * Tolerance of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\n     *\n     * @member {number}\n     * @default 0.05\n     */\n    prototypeAccessors.epsilon.set = function (value) {\n        this.uniforms.epsilon = value;\n    };\n    prototypeAccessors.epsilon.get = function () {\n        return this.uniforms.epsilon;\n    };\n\n    Object.defineProperties( MultiColorReplaceFilter.prototype, prototypeAccessors );\n\n    return MultiColorReplaceFilter;\n}(Filter));\n\nexport { MultiColorReplaceFilter };\n//# sourceMappingURL=filter-multi-color-replace.esm.js.map\n","/*!\n * @pixi/filter-old-film - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-old-film is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"varying vec2 vTextureCoord;\\nuniform sampler2D uSampler;\\nuniform vec4 filterArea;\\nuniform vec2 dimensions;\\n\\nuniform float sepia;\\nuniform float noise;\\nuniform float noiseSize;\\nuniform float scratch;\\nuniform float scratchDensity;\\nuniform float scratchWidth;\\nuniform float vignetting;\\nuniform float vignettingAlpha;\\nuniform float vignettingBlur;\\nuniform float seed;\\n\\nconst float SQRT_2 = 1.414213;\\nconst vec3 SEPIA_RGB = vec3(112.0 / 255.0, 66.0 / 255.0, 20.0 / 255.0);\\n\\nfloat rand(vec2 co) {\\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\\n}\\n\\nvec3 Overlay(vec3 src, vec3 dst)\\n{\\n    // if (dst <= 0.5) then: 2 * src * dst\\n    // if (dst > 0.5) then: 1 - 2 * (1 - dst) * (1 - src)\\n    return vec3((dst.x <= 0.5) ? (2.0 * src.x * dst.x) : (1.0 - 2.0 * (1.0 - dst.x) * (1.0 - src.x)),\\n                (dst.y <= 0.5) ? (2.0 * src.y * dst.y) : (1.0 - 2.0 * (1.0 - dst.y) * (1.0 - src.y)),\\n                (dst.z <= 0.5) ? (2.0 * src.z * dst.z) : (1.0 - 2.0 * (1.0 - dst.z) * (1.0 - src.z)));\\n}\\n\\n\\nvoid main()\\n{\\n    gl_FragColor = texture2D(uSampler, vTextureCoord);\\n    vec3 color = gl_FragColor.rgb;\\n\\n    if (sepia > 0.0)\\n    {\\n        float gray = (color.x + color.y + color.z) / 3.0;\\n        vec3 grayscale = vec3(gray);\\n\\n        color = Overlay(SEPIA_RGB, grayscale);\\n\\n        color = grayscale + sepia * (color - grayscale);\\n    }\\n\\n    vec2 coord = vTextureCoord * filterArea.xy / dimensions.xy;\\n\\n    if (vignetting > 0.0)\\n    {\\n        float outter = SQRT_2 - vignetting * SQRT_2;\\n        vec2 dir = vec2(vec2(0.5, 0.5) - coord);\\n        dir.y *= dimensions.y / dimensions.x;\\n        float darker = clamp((outter - length(dir) * SQRT_2) / ( 0.00001 + vignettingBlur * SQRT_2), 0.0, 1.0);\\n        color.rgb *= darker + (1.0 - darker) * (1.0 - vignettingAlpha);\\n    }\\n\\n    if (scratchDensity > seed && scratch != 0.0)\\n    {\\n        float phase = seed * 256.0;\\n        float s = mod(floor(phase), 2.0);\\n        float dist = 1.0 / scratchDensity;\\n        float d = distance(coord, vec2(seed * dist, abs(s - seed * dist)));\\n        if (d < seed * 0.6 + 0.4)\\n        {\\n            highp float period = scratchDensity * 10.0;\\n\\n            float xx = coord.x * period + phase;\\n            float aa = abs(mod(xx, 0.5) * 4.0);\\n            float bb = mod(floor(xx / 0.5), 2.0);\\n            float yy = (1.0 - bb) * aa + bb * (2.0 - aa);\\n\\n            float kk = 2.0 * period;\\n            float dw = scratchWidth / dimensions.x * (0.75 + seed);\\n            float dh = dw * kk;\\n\\n            float tine = (yy - (2.0 - dh));\\n\\n            if (tine > 0.0) {\\n                float _sign = sign(scratch);\\n\\n                tine = s * tine / period + scratch + 0.1;\\n                tine = clamp(tine + 1.0, 0.5 + _sign * 0.5, 1.5 + _sign * 0.5);\\n\\n                color.rgb *= tine;\\n            }\\n        }\\n    }\\n\\n    if (noise > 0.0 && noiseSize > 0.0)\\n    {\\n        vec2 pixelCoord = vTextureCoord.xy * filterArea.xy;\\n        pixelCoord.x = floor(pixelCoord.x / noiseSize);\\n        pixelCoord.y = floor(pixelCoord.y / noiseSize);\\n        // vec2 d = pixelCoord * noiseSize * vec2(1024.0 + seed * 512.0, 1024.0 - seed * 512.0);\\n        // float _noise = snoise(d) * 0.5;\\n        float _noise = rand(pixelCoord * noiseSize * seed) - 0.5;\\n        color += _noise * noise;\\n    }\\n\\n    gl_FragColor.rgb = color;\\n}\\n\";\n\n/**\n * The OldFilmFilter applies a Old film effect to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/old-film.gif)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-old-film|@pixi/filter-old-film}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n *\n * @param {object|number} [options] - The optional parameters of old film effect.\n *                        When options is a number , it will be `seed`\n * @param {number} [options.sepia=0.3] - The amount of saturation of sepia effect,\n *        a value of `1` is more saturation and closer to `0` is less, and a value of\n *        `0` produces no sepia effect\n * @param {number} [options.noise=0.3] - Opacity/intensity of the noise effect between `0` and `1`\n * @param {number} [options.noiseSize=1.0] - The size of the noise particles\n * @param {number} [options.scratch=0.5] - How often scratches appear\n * @param {number} [options.scratchDensity=0.3] - The density of the number of scratches\n * @param {number} [options.scratchWidth=1.0] - The width of the scratches\n * @param {number} [options.vignetting=0.3] - The radius of the vignette effect, smaller\n *        values produces a smaller vignette\n * @param {number} [options.vignettingAlpha=1.0] - Amount of opacity of vignette\n * @param {number} [options.vignettingBlur=0.3] - Blur intensity of the vignette\n * @param {number} [seed=0] - A see value to apply to the random noise generation\n */\nvar OldFilmFilter = /*@__PURE__*/(function (Filter) {\n    function OldFilmFilter(options, seed) {\n        if ( seed === void 0 ) seed = 0;\n\n        Filter.call(this, vertex, fragment);\n        this.uniforms.dimensions = new Float32Array(2);\n\n        if (typeof options === 'number') {\n            this.seed = options;\n            options = null;\n        }\n        else {\n            /**\n             * A see value to apply to the random noise generation\n             * @member {number}\n             */\n            this.seed = seed;\n        }\n\n        Object.assign(this, {\n            sepia: 0.3,\n            noise: 0.3,\n            noiseSize: 1.0,\n            scratch: 0.5,\n            scratchDensity: 0.3,\n            scratchWidth: 1.0,\n            vignetting: 0.3,\n            vignettingAlpha: 1.0,\n            vignettingBlur: 0.3,\n        }, options);\n    }\n\n    if ( Filter ) OldFilmFilter.__proto__ = Filter;\n    OldFilmFilter.prototype = Object.create( Filter && Filter.prototype );\n    OldFilmFilter.prototype.constructor = OldFilmFilter;\n\n    var prototypeAccessors = { sepia: { configurable: true },noise: { configurable: true },noiseSize: { configurable: true },scratch: { configurable: true },scratchDensity: { configurable: true },scratchWidth: { configurable: true },vignetting: { configurable: true },vignettingAlpha: { configurable: true },vignettingBlur: { configurable: true } };\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    OldFilmFilter.prototype.apply = function apply (filterManager, input, output, clear) {\n        this.uniforms.dimensions[0] = input.filterFrame.width;\n        this.uniforms.dimensions[1] = input.filterFrame.height;\n\n        // named `seed` because in the most programming languages,\n        // `random` used for \"the function for generating random value\".\n        this.uniforms.seed = this.seed;\n\n        filterManager.applyFilter(this, input, output, clear);\n    };\n\n\n    /**\n     * The amount of saturation of sepia effect,\n     * a value of `1` is more saturation and closer to `0` is less,\n     * and a value of `0` produces no sepia effect\n     *\n     * @member {number}\n     * @default 0\n     */\n    prototypeAccessors.sepia.set = function (value) {\n        this.uniforms.sepia = value;\n    };\n\n    prototypeAccessors.sepia.get = function () {\n        return this.uniforms.sepia;\n    };\n\n    /**\n     * Opacity/intensity of the noise effect between `0` and `1`\n     *\n     * @member {number}\n     * @default 0\n     */\n    prototypeAccessors.noise.set = function (value) {\n        this.uniforms.noise = value;\n    };\n\n    prototypeAccessors.noise.get = function () {\n        return this.uniforms.noise;\n    };\n\n    /**\n     * The size of the noise particles\n     *\n     * @member {number}\n     * @default 0\n     */\n    prototypeAccessors.noiseSize.set = function (value) {\n        this.uniforms.noiseSize = value;\n    };\n\n    prototypeAccessors.noiseSize.get = function () {\n        return this.uniforms.noiseSize;\n    };\n\n    /**\n     * How often scratches appear\n     *\n     * @member {number}\n     * @default 0\n     */\n    prototypeAccessors.scratch.set = function (value) {\n        this.uniforms.scratch = value;\n    };\n\n    prototypeAccessors.scratch.get = function () {\n        return this.uniforms.scratch;\n    };\n\n    /**\n     * The density of the number of scratches\n     *\n     * @member {number}\n     * @default 0\n     */\n    prototypeAccessors.scratchDensity.set = function (value) {\n        this.uniforms.scratchDensity = value;\n    };\n\n    prototypeAccessors.scratchDensity.get = function () {\n        return this.uniforms.scratchDensity;\n    };\n\n    /**\n     * The width of the scratches\n     *\n     * @member {number}\n     * @default 0\n     */\n    prototypeAccessors.scratchWidth.set = function (value) {\n        this.uniforms.scratchWidth = value;\n    };\n\n    prototypeAccessors.scratchWidth.get = function () {\n        return this.uniforms.scratchWidth;\n    };\n\n    /**\n     * The radius of the vignette effect, smaller\n     * values produces a smaller vignette\n     *\n     * @member {number}\n     * @default 0\n     */\n    prototypeAccessors.vignetting.set = function (value) {\n        this.uniforms.vignetting = value;\n    };\n\n    prototypeAccessors.vignetting.get = function () {\n        return this.uniforms.vignetting;\n    };\n\n    /**\n     * Amount of opacity of vignette\n     *\n     * @member {number}\n     * @default 0\n     */\n    prototypeAccessors.vignettingAlpha.set = function (value) {\n        this.uniforms.vignettingAlpha = value;\n    };\n\n    prototypeAccessors.vignettingAlpha.get = function () {\n        return this.uniforms.vignettingAlpha;\n    };\n\n    /**\n     * Blur intensity of the vignette\n     *\n     * @member {number}\n     * @default 0\n     */\n    prototypeAccessors.vignettingBlur.set = function (value) {\n        this.uniforms.vignettingBlur = value;\n    };\n\n    prototypeAccessors.vignettingBlur.get = function () {\n        return this.uniforms.vignettingBlur;\n    };\n\n    Object.defineProperties( OldFilmFilter.prototype, prototypeAccessors );\n\n    return OldFilmFilter;\n}(Filter));\n\nexport { OldFilmFilter };\n//# sourceMappingURL=filter-old-film.esm.js.map\n","/*!\n * @pixi/filter-outline - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-outline is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\nimport { rgb2hex, hex2rgb } from '@pixi/utils';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"varying vec2 vTextureCoord;\\nuniform sampler2D uSampler;\\n\\nuniform vec2 thickness;\\nuniform vec4 outlineColor;\\nuniform vec4 filterClamp;\\n\\nconst float DOUBLE_PI = 3.14159265358979323846264 * 2.;\\n\\nvoid main(void) {\\n    vec4 ownColor = texture2D(uSampler, vTextureCoord);\\n    vec4 curColor;\\n    float maxAlpha = 0.;\\n    vec2 displaced;\\n    for (float angle = 0.; angle <= DOUBLE_PI; angle += ${angleStep}) {\\n        displaced.x = vTextureCoord.x + thickness.x * cos(angle);\\n        displaced.y = vTextureCoord.y + thickness.y * sin(angle);\\n        curColor = texture2D(uSampler, clamp(displaced, filterClamp.xy, filterClamp.zw));\\n        maxAlpha = max(maxAlpha, curColor.a);\\n    }\\n    float resultAlpha = max(maxAlpha, ownColor.a);\\n    gl_FragColor = vec4((ownColor.rgb + outlineColor.rgb * (1. - ownColor.a)) * resultAlpha, resultAlpha);\\n}\\n\";\n\n/**\n * OutlineFilter, originally by mishaa\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966\n * http://codepen.io/mishaa/pen/emGNRB<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/outline.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-outline|@pixi/filter-outline}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {number} [thickness=1] The tickness of the outline. Make it 2 times more for resolution 2\n * @param {number} [color=0x000000] The color of the outline.\n * @param {number} [quality=0.1] The quality of the outline from `0` to `1`, using a higher quality\n *        setting will result in slower performance and more accuracy.\n *\n * @example\n *  someSprite.shader = new OutlineFilter(9, 0xFF0000);\n */\nvar OutlineFilter = /*@__PURE__*/(function (Filter) {\n    function OutlineFilter(thickness, color, quality) {\n        if ( thickness === void 0 ) thickness = 1;\n        if ( color === void 0 ) color = 0x000000;\n        if ( quality === void 0 ) quality = 0.1;\n\n        var samples =  Math.max(\n            quality * OutlineFilter.MAX_SAMPLES,\n            OutlineFilter.MIN_SAMPLES\n        );\n        var angleStep = (Math.PI * 2 / samples).toFixed(7);\n\n        Filter.call(this, vertex, fragment.replace(/\\$\\{angleStep\\}/, angleStep));\n        this.uniforms.thickness = new Float32Array([0, 0]);\n\n        /**\n         * The thickness of the outline.\n         * @member {number}\n         * @default 1\n         */\n        this.thickness = thickness;\n\n        this.uniforms.outlineColor = new Float32Array([0, 0, 0, 1]);\n        this.color = color;\n\n        this.quality = quality;\n    }\n\n    if ( Filter ) OutlineFilter.__proto__ = Filter;\n    OutlineFilter.prototype = Object.create( Filter && Filter.prototype );\n    OutlineFilter.prototype.constructor = OutlineFilter;\n\n    var prototypeAccessors = { color: { configurable: true } };\n\n    OutlineFilter.prototype.apply = function apply (filterManager, input, output, clear) {\n        this.uniforms.thickness[0] = this.thickness / input._frame.width;\n        this.uniforms.thickness[1] = this.thickness / input._frame.height;\n\n        filterManager.applyFilter(this, input, output, clear);\n    };\n\n    /**\n     * The color of the glow.\n     * @member {number}\n     * @default 0x000000\n     */\n    prototypeAccessors.color.get = function () {\n        return rgb2hex(this.uniforms.outlineColor);\n    };\n    prototypeAccessors.color.set = function (value) {\n        hex2rgb(value, this.uniforms.outlineColor);\n    };\n\n    Object.defineProperties( OutlineFilter.prototype, prototypeAccessors );\n\n    return OutlineFilter;\n}(Filter));\n\n/**\n * The minimum number of samples for rendering outline.\n * @static\n * @member {number} MIN_SAMPLES\n * @memberof PIXI.filters.OutlineFilter\n * @default 1\n */\nOutlineFilter.MIN_SAMPLES = 1;\n\n/**\n * The maximum number of samples for rendering outline.\n * @static\n * @member {number} MAX_SAMPLES\n * @memberof PIXI.filters.OutlineFilter\n * @default 100\n */\nOutlineFilter.MAX_SAMPLES = 100;\n\nexport { OutlineFilter };\n//# sourceMappingURL=filter-outline.esm.js.map\n","/*!\n * @pixi/filter-pixelate - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-pixelate is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"precision mediump float;\\n\\nvarying vec2 vTextureCoord;\\n\\nuniform vec2 size;\\nuniform sampler2D uSampler;\\n\\nuniform vec4 filterArea;\\n\\nvec2 mapCoord( vec2 coord )\\n{\\n    coord *= filterArea.xy;\\n    coord += filterArea.zw;\\n\\n    return coord;\\n}\\n\\nvec2 unmapCoord( vec2 coord )\\n{\\n    coord -= filterArea.zw;\\n    coord /= filterArea.xy;\\n\\n    return coord;\\n}\\n\\nvec2 pixelate(vec2 coord, vec2 size)\\n{\\n\\treturn floor( coord / size ) * size;\\n}\\n\\nvoid main(void)\\n{\\n    vec2 coord = mapCoord(vTextureCoord);\\n\\n    coord = pixelate(coord, size);\\n\\n    coord = unmapCoord(coord);\\n\\n    gl_FragColor = texture2D(uSampler, coord);\\n}\\n\";\n\n/**\n * This filter applies a pixelate effect making display objects appear 'blocky'.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/pixelate.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-pixelate|@pixi/filter-pixelate}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {PIXI.Point|Array<number>|number} [size=10] Either the width/height of the size of the pixels, or square size\n */\nvar PixelateFilter = /*@__PURE__*/(function (Filter) {\n    function PixelateFilter(size) {\n        if ( size === void 0 ) size = 10;\n\n        Filter.call(this, vertex, fragment);\n        this.size = size;\n    }\n\n    if ( Filter ) PixelateFilter.__proto__ = Filter;\n    PixelateFilter.prototype = Object.create( Filter && Filter.prototype );\n    PixelateFilter.prototype.constructor = PixelateFilter;\n\n    var prototypeAccessors = { size: { configurable: true } };\n\n    /**\n     * This a point that describes the size of the blocks.\n     * x is the width of the block and y is the height.\n     *\n     * @member {PIXI.Point|Array<number>|number}\n     * @default 10\n     */\n    prototypeAccessors.size.get = function () {\n        return this.uniforms.size;\n    };\n    prototypeAccessors.size.set = function (value) {\n        if (typeof value === 'number') {\n            value = [value, value];\n        }\n        this.uniforms.size = value;\n    };\n\n    Object.defineProperties( PixelateFilter.prototype, prototypeAccessors );\n\n    return PixelateFilter;\n}(Filter));\n\nexport { PixelateFilter };\n//# sourceMappingURL=filter-pixelate.esm.js.map\n","/*!\n * @pixi/filter-radial-blur - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-radial-blur is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"varying vec2 vTextureCoord;\\nuniform sampler2D uSampler;\\nuniform vec4 filterArea;\\n\\nuniform float uRadian;\\nuniform vec2 uCenter;\\nuniform float uRadius;\\nuniform int uKernelSize;\\n\\nconst int MAX_KERNEL_SIZE = 2048;\\n\\nvoid main(void)\\n{\\n    vec4 color = texture2D(uSampler, vTextureCoord);\\n\\n    if (uKernelSize == 0)\\n    {\\n        gl_FragColor = color;\\n        return;\\n    }\\n\\n    float aspect = filterArea.y / filterArea.x;\\n    vec2 center = uCenter.xy / filterArea.xy;\\n    float gradient = uRadius / filterArea.x * 0.3;\\n    float radius = uRadius / filterArea.x - gradient * 0.5;\\n    int k = uKernelSize - 1;\\n\\n    vec2 coord = vTextureCoord;\\n    vec2 dir = vec2(center - coord);\\n    float dist = length(vec2(dir.x, dir.y * aspect));\\n\\n    float radianStep = uRadian;\\n    if (radius >= 0.0 && dist > radius) {\\n        float delta = dist - radius;\\n        float gap = gradient;\\n        float scale = 1.0 - abs(delta / gap);\\n        if (scale <= 0.0) {\\n            gl_FragColor = color;\\n            return;\\n        }\\n        radianStep *= scale;\\n    }\\n    radianStep /= float(k);\\n\\n    float s = sin(radianStep);\\n    float c = cos(radianStep);\\n    mat2 rotationMatrix = mat2(vec2(c, -s), vec2(s, c));\\n\\n    for(int i = 0; i < MAX_KERNEL_SIZE - 1; i++) {\\n        if (i == k) {\\n            break;\\n        }\\n\\n        coord -= center;\\n        coord.y *= aspect;\\n        coord = rotationMatrix * coord;\\n        coord.y /= aspect;\\n        coord += center;\\n\\n        vec4 sample = texture2D(uSampler, coord);\\n\\n        // switch to pre-multiplied alpha to correctly blur transparent images\\n        // sample.rgb *= sample.a;\\n\\n        color += sample;\\n    }\\n\\n    gl_FragColor = color / float(uKernelSize);\\n}\\n\";\n\n/**\n * The RadialBlurFilter applies a Motion blur to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/radial-blur.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-radial-blur|@pixi/filter-radial-blur}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {number} [angle=0] Sets the angle of the motion for blur effect.\n * @param {PIXI.Point|number[]} [center=[0,0]] The center of the radial.\n * @param {number} [kernelSize=5] - The kernelSize of the blur filter. But be odd number >= 3\n * @param {number} [radius=-1] - The maximum size of the blur radius, `-1` is infinite\n */\nvar RadialBlurFilter = /*@__PURE__*/(function (Filter) {\n    function RadialBlurFilter(angle, center, kernelSize, radius) {\n        if ( angle === void 0 ) angle = 0;\n        if ( center === void 0 ) center = [0, 0];\n        if ( kernelSize === void 0 ) kernelSize = 5;\n        if ( radius === void 0 ) radius = -1;\n\n        Filter.call(this, vertex, fragment);\n\n        this._angle = 0;\n        this.angle = angle;\n        this.center = center;\n        this.kernelSize = kernelSize;\n        this.radius = radius;\n    }\n\n    if ( Filter ) RadialBlurFilter.__proto__ = Filter;\n    RadialBlurFilter.prototype = Object.create( Filter && Filter.prototype );\n    RadialBlurFilter.prototype.constructor = RadialBlurFilter;\n\n    var prototypeAccessors = { angle: { configurable: true },center: { configurable: true },radius: { configurable: true } };\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    RadialBlurFilter.prototype.apply = function apply (filterManager, input, output, clear) {\n        this.uniforms.uKernelSize = this._angle !== 0 ? this.kernelSize : 0;\n        filterManager.applyFilter(this, input, output, clear);\n    };\n\n    /**\n     * Sets the angle in degrees of the motion for blur effect.\n     *\n     * @member {PIXI.Point|number[]}\n     * @default [0, 0]\n     */\n    prototypeAccessors.angle.set = function (value) {\n        this._angle = value;\n        this.uniforms.uRadian = value * Math.PI / 180;\n    };\n\n    prototypeAccessors.angle.get = function () {\n        return this._angle;\n    };\n\n    /**\n     * Center of the effect.\n     *\n     * @member {PIXI.Point|number[]}\n     * @default [0, 0]\n     */\n    prototypeAccessors.center.get = function () {\n        return this.uniforms.uCenter;\n    };\n\n    prototypeAccessors.center.set = function (value) {\n        this.uniforms.uCenter = value;\n    };\n\n    /**\n     * Outer radius of the effect. The default value of `-1` is infinite.\n     *\n     * @member {number}\n     * @default -1\n     */\n    prototypeAccessors.radius.get = function () {\n        return this.uniforms.uRadius;\n    };\n\n    prototypeAccessors.radius.set = function (value) {\n        if (value < 0 || value === Infinity) {\n            value = -1;\n        }\n        this.uniforms.uRadius = value;\n    };\n\n    Object.defineProperties( RadialBlurFilter.prototype, prototypeAccessors );\n\n    return RadialBlurFilter;\n}(Filter));\n\nexport { RadialBlurFilter };\n//# sourceMappingURL=filter-radial-blur.esm.js.map\n","/*!\n * @pixi/filter-reflection - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-reflection is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"varying vec2 vTextureCoord;\\nuniform sampler2D uSampler;\\n\\nuniform vec4 filterArea;\\nuniform vec4 filterClamp;\\nuniform vec2 dimensions;\\n\\nuniform bool mirror;\\nuniform float boundary;\\nuniform vec2 amplitude;\\nuniform vec2 waveLength;\\nuniform vec2 alpha;\\nuniform float time;\\n\\nfloat rand(vec2 co) {\\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\\n}\\n\\nvoid main(void)\\n{\\n    vec2 pixelCoord = vTextureCoord.xy * filterArea.xy;\\n    vec2 coord = pixelCoord / dimensions;\\n\\n    if (coord.y < boundary) {\\n        gl_FragColor = texture2D(uSampler, vTextureCoord);\\n        return;\\n    }\\n\\n    float k = (coord.y - boundary) / (1. - boundary + 0.0001);\\n    float areaY = boundary * dimensions.y / filterArea.y;\\n    float v = areaY + areaY - vTextureCoord.y;\\n    float y = mirror ? v : vTextureCoord.y;\\n\\n    float _amplitude = ((amplitude.y - amplitude.x) * k + amplitude.x ) / filterArea.x;\\n    float _waveLength = ((waveLength.y - waveLength.x) * k + waveLength.x) / filterArea.y;\\n    float _alpha = (alpha.y - alpha.x) * k + alpha.x;\\n\\n    float x = vTextureCoord.x + cos(v * 6.28 / _waveLength - time) * _amplitude;\\n    x = clamp(x, filterClamp.x, filterClamp.z);\\n\\n    vec4 color = texture2D(uSampler, vec2(x, y));\\n\\n    gl_FragColor = color * _alpha;\\n}\\n\";\n\n/**\n * Applies a reflection effect to simulate the reflection on water with waves.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/reflection.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-reflection|@pixi/filter-reflection}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n *\n * @param {object} [options] - The optional parameters of Reflection effect.\n * @param {number} [options.mirror=true] - `true` to reflect the image, `false` for waves-only\n * @param {number} [options.boundary=0.5] - Vertical position of the reflection point, default is 50% (middle)\n *                 smaller numbers produce a larger reflection, larger numbers produce a smaller reflection.\n * @param {number} [options.amplitude=[0, 20]] - Starting and ending amplitude of waves\n * @param {number} [options.waveLength=[30, 100]] - Starting and ending length of waves\n * @param {number} [options.alpha=[1, 1]] - Starting and ending alpha values\n * @param {number} [options.time=0] - Time for animating position of waves\n */\nvar ReflectionFilter = /*@__PURE__*/(function (Filter) {\n    function ReflectionFilter(options) {\n        Filter.call(this, vertex, fragment);\n        this.uniforms.amplitude = new Float32Array(2);\n        this.uniforms.waveLength = new Float32Array(2);\n        this.uniforms.alpha = new Float32Array(2);\n        this.uniforms.dimensions = new Float32Array(2);\n\n        Object.assign(this, {\n            mirror: true,\n            boundary: 0.5,\n            amplitude: [0, 20],\n            waveLength: [30, 100],\n            alpha: [1, 1],\n\n            /**\n             * Time for animating position of waves\n             *\n             * @member {number}\n             * @memberof PIXI.filters.ReflectionFilter#\n             * @default 0\n             */\n            time: 0,\n        }, options);\n    }\n\n    if ( Filter ) ReflectionFilter.__proto__ = Filter;\n    ReflectionFilter.prototype = Object.create( Filter && Filter.prototype );\n    ReflectionFilter.prototype.constructor = ReflectionFilter;\n\n    var prototypeAccessors = { mirror: { configurable: true },boundary: { configurable: true },amplitude: { configurable: true },waveLength: { configurable: true },alpha: { configurable: true } };\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    ReflectionFilter.prototype.apply = function apply (filterManager, input, output, clear) {\n        this.uniforms.dimensions[0] = input.filterFrame.width;\n        this.uniforms.dimensions[1] = input.filterFrame.height;\n\n        this.uniforms.time = this.time;\n\n        filterManager.applyFilter(this, input, output, clear);\n    };\n\n    /**\n     * `true` to reflect the image, `false` for waves-only\n     *\n     * @member {boolean}\n     * @default true\n     */\n    prototypeAccessors.mirror.set = function (value) {\n        this.uniforms.mirror = value;\n    };\n    prototypeAccessors.mirror.get = function () {\n        return this.uniforms.mirror;\n    };\n\n    /**\n     * Vertical position of the reflection point, default is 50% (middle)\n     * smaller numbers produce a larger reflection, larger numbers produce a smaller reflection.\n     *\n     * @member {number}\n     * @default 0.5\n     */\n    prototypeAccessors.boundary.set = function (value) {\n        this.uniforms.boundary = value;\n    };\n    prototypeAccessors.boundary.get = function () {\n        return this.uniforms.boundary;\n    };\n\n    /**\n     * Starting and ending amplitude of waves\n     * @member {number[]}\n     * @default [0, 20]\n     */\n    prototypeAccessors.amplitude.set = function (value) {\n        this.uniforms.amplitude[0] = value[0];\n        this.uniforms.amplitude[1] = value[1];\n    };\n    prototypeAccessors.amplitude.get = function () {\n        return this.uniforms.amplitude;\n    };\n\n    /**\n     * Starting and ending length of waves\n     * @member {number[]}\n     * @default [30, 100]\n     */\n    prototypeAccessors.waveLength.set = function (value) {\n        this.uniforms.waveLength[0] = value[0];\n        this.uniforms.waveLength[1] = value[1];\n    };\n    prototypeAccessors.waveLength.get = function () {\n        return this.uniforms.waveLength;\n    };\n\n    /**\n     * Starting and ending alpha values\n     * @member {number[]}\n     * @default [1, 1]\n     */\n    prototypeAccessors.alpha.set = function (value) {\n        this.uniforms.alpha[0] = value[0];\n        this.uniforms.alpha[1] = value[1];\n    };\n    prototypeAccessors.alpha.get = function () {\n        return this.uniforms.alpha;\n    };\n\n    Object.defineProperties( ReflectionFilter.prototype, prototypeAccessors );\n\n    return ReflectionFilter;\n}(Filter));\n\nexport { ReflectionFilter };\n//# sourceMappingURL=filter-reflection.esm.js.map\n","/*!\n * @pixi/filter-rgb-split - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-rgb-split is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"precision mediump float;\\n\\nvarying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\nuniform vec4 filterArea;\\nuniform vec2 red;\\nuniform vec2 green;\\nuniform vec2 blue;\\n\\nvoid main(void)\\n{\\n   gl_FragColor.r = texture2D(uSampler, vTextureCoord + red/filterArea.xy).r;\\n   gl_FragColor.g = texture2D(uSampler, vTextureCoord + green/filterArea.xy).g;\\n   gl_FragColor.b = texture2D(uSampler, vTextureCoord + blue/filterArea.xy).b;\\n   gl_FragColor.a = texture2D(uSampler, vTextureCoord).a;\\n}\\n\";\n\n/**\n * An RGB Split Filter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/rgb.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-rgb-split|@pixi/filter-rgb-split}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {PIXI.Point} [red=[-10,0]] Red channel offset\n * @param {PIXI.Point} [green=[0, 10]] Green channel offset\n * @param {PIXI.Point} [blue=[0, 0]] Blue channel offset\n */\nvar RGBSplitFilter = /*@__PURE__*/(function (Filter) {\n    function RGBSplitFilter(red, green, blue) {\n        if ( red === void 0 ) red = [-10, 0];\n        if ( green === void 0 ) green = [0, 10];\n        if ( blue === void 0 ) blue = [0, 0];\n\n        Filter.call(this, vertex, fragment);\n        this.red = red;\n        this.green = green;\n        this.blue = blue;\n    }\n\n    if ( Filter ) RGBSplitFilter.__proto__ = Filter;\n    RGBSplitFilter.prototype = Object.create( Filter && Filter.prototype );\n    RGBSplitFilter.prototype.constructor = RGBSplitFilter;\n\n    var prototypeAccessors = { red: { configurable: true },green: { configurable: true },blue: { configurable: true } };\n\n    /**\n     * Red channel offset.\n     *\n     * @member {PIXI.Point}\n     */\n    prototypeAccessors.red.get = function () {\n        return this.uniforms.red;\n    };\n    prototypeAccessors.red.set = function (value) {\n        this.uniforms.red = value;\n    };\n\n    /**\n     * Green channel offset.\n     *\n     * @member {PIXI.Point}\n     */\n    prototypeAccessors.green.get = function () {\n        return this.uniforms.green;\n    };\n    prototypeAccessors.green.set = function (value) {\n        this.uniforms.green = value;\n    };\n\n    /**\n     * Blue offset.\n     *\n     * @member {PIXI.Point}\n     */\n    prototypeAccessors.blue.get = function () {\n        return this.uniforms.blue;\n    };\n    prototypeAccessors.blue.set = function (value) {\n        this.uniforms.blue = value;\n    };\n\n    Object.defineProperties( RGBSplitFilter.prototype, prototypeAccessors );\n\n    return RGBSplitFilter;\n}(Filter));\n\nexport { RGBSplitFilter };\n//# sourceMappingURL=filter-rgb-split.esm.js.map\n","/*!\n * @pixi/filter-shockwave - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-shockwave is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"varying vec2 vTextureCoord;\\nuniform sampler2D uSampler;\\nuniform vec4 filterArea;\\nuniform vec4 filterClamp;\\n\\nuniform vec2 center;\\n\\nuniform float amplitude;\\nuniform float wavelength;\\n// uniform float power;\\nuniform float brightness;\\nuniform float speed;\\nuniform float radius;\\n\\nuniform float time;\\n\\nconst float PI = 3.14159;\\n\\nvoid main()\\n{\\n    float halfWavelength = wavelength * 0.5 / filterArea.x;\\n    float maxRadius = radius / filterArea.x;\\n    float currentRadius = time * speed / filterArea.x;\\n\\n    float fade = 1.0;\\n\\n    if (maxRadius > 0.0) {\\n        if (currentRadius > maxRadius) {\\n            gl_FragColor = texture2D(uSampler, vTextureCoord);\\n            return;\\n        }\\n        fade = 1.0 - pow(currentRadius / maxRadius, 2.0);\\n    }\\n\\n    vec2 dir = vec2(vTextureCoord - center / filterArea.xy);\\n    dir.y *= filterArea.y / filterArea.x;\\n    float dist = length(dir);\\n\\n    if (dist <= 0.0 || dist < currentRadius - halfWavelength || dist > currentRadius + halfWavelength) {\\n        gl_FragColor = texture2D(uSampler, vTextureCoord);\\n        return;\\n    }\\n\\n    vec2 diffUV = normalize(dir);\\n\\n    float diff = (dist - currentRadius) / halfWavelength;\\n\\n    float p = 1.0 - pow(abs(diff), 2.0);\\n\\n    // float powDiff = diff * pow(p, 2.0) * ( amplitude * fade );\\n    float powDiff = 1.25 * sin(diff * PI) * p * ( amplitude * fade );\\n\\n    vec2 offset = diffUV * powDiff / filterArea.xy;\\n\\n    // Do clamp :\\n    vec2 coord = vTextureCoord + offset;\\n    vec2 clampedCoord = clamp(coord, filterClamp.xy, filterClamp.zw);\\n    vec4 color = texture2D(uSampler, clampedCoord);\\n    if (coord != clampedCoord) {\\n        color *= max(0.0, 1.0 - length(coord - clampedCoord));\\n    }\\n\\n    // No clamp :\\n    // gl_FragColor = texture2D(uSampler, vTextureCoord + offset);\\n\\n    color.rgb *= 1.0 + (brightness - 1.0) * p * fade;\\n\\n    gl_FragColor = color;\\n}\\n\";\n\n/**\n * The ShockwaveFilter class lets you apply a shockwave effect.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/shockwave.gif)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-shockwave|@pixi/filter-shockwave}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n *\n * @param {PIXI.Point|number[]} [center=[0.5, 0.5]] See `center` property.\n * @param {object} [options] - The optional parameters of shockwave filter.\n * @param {number} [options.amplitude=0.5] - See `amplitude`` property.\n * @param {number} [options.wavelength=1.0] - See `wavelength` property.\n * @param {number} [options.speed=500.0] - See `speed` property.\n * @param {number} [options.brightness=8] - See `brightness` property.\n * @param {number} [options.radius=4] - See `radius` property.\n * @param {number} [time=0] - See `time` property.\n */\nvar ShockwaveFilter = /*@__PURE__*/(function (Filter) {\n    function ShockwaveFilter(center, options, time) {\n        if ( center === void 0 ) center = [0.0, 0.0];\n        if ( options === void 0 ) options = {};\n        if ( time === void 0 ) time = 0;\n\n        Filter.call(this, vertex, fragment);\n\n        this.center = center;\n\n        if (Array.isArray(options)) {\n            // eslint-disable-next-line no-console\n            console.warn('Deprecated Warning: ShockwaveFilter params Array has been changed to options Object.');\n            options = {};\n        }\n\n        options = Object.assign({\n            amplitude: 30.0,\n            wavelength: 160.0,\n            brightness: 1.0,\n            speed: 500.0,\n            radius: -1.0,\n        }, options);\n\n        this.amplitude = options.amplitude;\n\n        this.wavelength = options.wavelength;\n\n        this.brightness = options.brightness;\n\n        this.speed = options.speed;\n\n        this.radius = options.radius;\n\n        /**\n         * Sets the elapsed time of the shockwave.\n         * It could control the current size of shockwave.\n         *\n         * @member {number}\n         */\n        this.time = time;\n    }\n\n    if ( Filter ) ShockwaveFilter.__proto__ = Filter;\n    ShockwaveFilter.prototype = Object.create( Filter && Filter.prototype );\n    ShockwaveFilter.prototype.constructor = ShockwaveFilter;\n\n    var prototypeAccessors = { center: { configurable: true },amplitude: { configurable: true },wavelength: { configurable: true },brightness: { configurable: true },speed: { configurable: true },radius: { configurable: true } };\n\n    ShockwaveFilter.prototype.apply = function apply (filterManager, input, output, clear) {\n        /**\n         * There is no set/get of `time`, for performance.\n         * Because in the most real cases, `time` will be changed in ever game tick.\n         * Use set/get will take more function-call.\n         */\n        this.uniforms.time = this.time;\n\n        filterManager.applyFilter(this, input, output, clear);\n    };\n\n    /**\n     * Sets the center of the shockwave in normalized screen coords. That is\n     * (0,0) is the top-left and (1,1) is the bottom right.\n     *\n     * @member {PIXI.Point|number[]}\n     */\n    prototypeAccessors.center.get = function () {\n        return this.uniforms.center;\n    };\n    prototypeAccessors.center.set = function (value) {\n        this.uniforms.center = value;\n    };\n\n    /**\n     * The amplitude of the shockwave.\n     *\n     * @member {number}\n     */\n    prototypeAccessors.amplitude.get = function () {\n        return this.uniforms.amplitude;\n    };\n    prototypeAccessors.amplitude.set = function (value) {\n        this.uniforms.amplitude = value;\n    };\n\n    /**\n     * The wavelength of the shockwave.\n     *\n     * @member {number}\n     */\n    prototypeAccessors.wavelength.get = function () {\n        return this.uniforms.wavelength;\n    };\n    prototypeAccessors.wavelength.set = function (value) {\n        this.uniforms.wavelength = value;\n    };\n\n    /**\n     * The brightness of the shockwave.\n     *\n     * @member {number}\n     */\n    prototypeAccessors.brightness.get = function () {\n        return this.uniforms.brightness;\n    };\n    prototypeAccessors.brightness.set = function (value) {\n        this.uniforms.brightness = value;\n    };\n\n    /**\n     * The speed about the shockwave ripples out.\n     * The unit is `pixel/second`\n     *\n     * @member {number}\n     */\n    prototypeAccessors.speed.get = function () {\n        return this.uniforms.speed;\n    };\n    prototypeAccessors.speed.set = function (value) {\n        this.uniforms.speed = value;\n    };\n\n    /**\n     * The maximum radius of shockwave.\n     * `< 0.0` means it's infinity.\n     *\n     * @member {number}\n     */\n    prototypeAccessors.radius.get = function () {\n        return this.uniforms.radius;\n    };\n    prototypeAccessors.radius.set = function (value) {\n        this.uniforms.radius = value;\n    };\n\n    Object.defineProperties( ShockwaveFilter.prototype, prototypeAccessors );\n\n    return ShockwaveFilter;\n}(Filter));\n\nexport { ShockwaveFilter };\n//# sourceMappingURL=filter-shockwave.esm.js.map\n","/*!\n * @pixi/filter-simple-lightmap - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-simple-lightmap is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\nimport { hex2rgb, rgb2hex } from '@pixi/utils';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"varying vec2 vTextureCoord;\\nuniform sampler2D uSampler;\\nuniform sampler2D uLightmap;\\nuniform vec4 filterArea;\\nuniform vec2 dimensions;\\nuniform vec4 ambientColor;\\nvoid main() {\\n    vec4 diffuseColor = texture2D(uSampler, vTextureCoord);\\n    vec2 lightCoord = (vTextureCoord * filterArea.xy) / dimensions;\\n    vec4 light = texture2D(uLightmap, lightCoord);\\n    vec3 ambient = ambientColor.rgb * ambientColor.a;\\n    vec3 intensity = ambient + light.rgb;\\n    vec3 finalColor = diffuseColor.rgb * intensity;\\n    gl_FragColor = vec4(finalColor, diffuseColor.a);\\n}\\n\";\n\n/**\n* SimpleLightmap, originally by Oza94\n* http://www.html5gamedevs.com/topic/20027-pixijs-simple-lightmapping/\n* http://codepen.io/Oza94/pen/EPoRxj\n*\n* You have to specify filterArea, or suffer consequences.\n* You may have to use it with `filter.dontFit = true`,\n*  until we rewrite this using same approach as for DisplacementFilter.\n*\n* ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/simple-lightmap.png)\n* @class\n* @extends PIXI.Filter\n* @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-simple-lightmap|@pixi/filter-simple-lightmap}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n* @param {PIXI.Texture} texture a texture where your lightmap is rendered\n* @param {Array<number>|number} [color=0x000000] An RGBA array of the ambient color\n* @param {number} [alpha=1] Default alpha set independent of color (if it's a number, not array).\n*\n* @example\n*  displayObject.filters = [new SimpleLightmapFilter(texture, 0x666666)];\n*/\nvar SimpleLightmapFilter = /*@__PURE__*/(function (Filter) {\n    function SimpleLightmapFilter(texture, color, alpha) {\n        if ( color === void 0 ) color = 0x000000;\n        if ( alpha === void 0 ) alpha = 1;\n\n        Filter.call(this, vertex, fragment);\n        this.uniforms.dimensions = new Float32Array(2);\n        this.uniforms.ambientColor = new Float32Array([0, 0, 0, alpha]);\n        this.texture = texture;\n        this.color = color;\n    }\n\n    if ( Filter ) SimpleLightmapFilter.__proto__ = Filter;\n    SimpleLightmapFilter.prototype = Object.create( Filter && Filter.prototype );\n    SimpleLightmapFilter.prototype.constructor = SimpleLightmapFilter;\n\n    var prototypeAccessors = { texture: { configurable: true },color: { configurable: true },alpha: { configurable: true } };\n\n    /**\n     * Applies the filter.\n     * @private\n     * @param {PIXI.FilterManager} filterManager - The manager.\n     * @param {PIXI.RenderTarget} input - The input target.\n     * @param {PIXI.RenderTarget} output - The output target.\n     */\n    SimpleLightmapFilter.prototype.apply = function apply (filterManager, input, output, clear) {\n        this.uniforms.dimensions[0] = input.filterFrame.width;\n        this.uniforms.dimensions[1] = input.filterFrame.height;\n\n        // draw the filter...\n        filterManager.applyFilter(this, input, output, clear);\n    };\n\n\n    /**\n     * a texture where your lightmap is rendered\n     * @member {PIXI.Texture}\n     */\n    prototypeAccessors.texture.get = function () {\n        return this.uniforms.uLightmap;\n    };\n    prototypeAccessors.texture.set = function (value) {\n        this.uniforms.uLightmap = value;\n    };\n\n    /**\n     * An RGBA array of the ambient color or a hex color without alpha\n     * @member {Array<number>|number}\n     */\n    prototypeAccessors.color.set = function (value) {\n        var arr = this.uniforms.ambientColor;\n        if (typeof value === 'number') {\n            hex2rgb(value, arr);\n            this._color = value;\n        }\n        else {\n            arr[0] = value[0];\n            arr[1] = value[1];\n            arr[2] = value[2];\n            arr[3] = value[3];\n            this._color = rgb2hex(arr);\n        }\n    };\n    prototypeAccessors.color.get = function () {\n        return this._color;\n    };\n\n    /**\n     * When setting `color` as hex, this can be used to set alpha independently.\n     * @member {number}\n     */\n    prototypeAccessors.alpha.get = function () {\n        return this.uniforms.ambientColor[3];\n    };\n    prototypeAccessors.alpha.set = function (value) {\n        this.uniforms.ambientColor[3] = value;\n    };\n\n    Object.defineProperties( SimpleLightmapFilter.prototype, prototypeAccessors );\n\n    return SimpleLightmapFilter;\n}(Filter));\n\nexport { SimpleLightmapFilter };\n//# sourceMappingURL=filter-simple-lightmap.esm.js.map\n","/*!\n * @pixi/filter-tilt-shift - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-tilt-shift is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\nimport { Point } from '@pixi/math';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"varying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\nuniform float blur;\\nuniform float gradientBlur;\\nuniform vec2 start;\\nuniform vec2 end;\\nuniform vec2 delta;\\nuniform vec2 texSize;\\n\\nfloat random(vec3 scale, float seed)\\n{\\n    return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\\n}\\n\\nvoid main(void)\\n{\\n    vec4 color = vec4(0.0);\\n    float total = 0.0;\\n\\n    float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\\n    vec2 normal = normalize(vec2(start.y - end.y, end.x - start.x));\\n    float radius = smoothstep(0.0, 1.0, abs(dot(vTextureCoord * texSize - start, normal)) / gradientBlur) * blur;\\n\\n    for (float t = -30.0; t <= 30.0; t++)\\n    {\\n        float percent = (t + offset - 0.5) / 30.0;\\n        float weight = 1.0 - abs(percent);\\n        vec4 sample = texture2D(uSampler, vTextureCoord + delta / texSize * percent * radius);\\n        sample.rgb *= sample.a;\\n        color += sample * weight;\\n        total += weight;\\n    }\\n\\n    color /= total;\\n    color.rgb /= color.a + 0.00001;\\n\\n    gl_FragColor = color;\\n}\\n\";\n\n/**\n * @author Vico @vicocotea\n * original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js by Evan Wallace : http://madebyevan.com/\n */\n\n/**\n * A TiltShiftAxisFilter.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @private\n */\nvar TiltShiftAxisFilter = /*@__PURE__*/(function (Filter) {\n    function TiltShiftAxisFilter(blur, gradientBlur, start, end){\n        if ( blur === void 0 ) blur = 100;\n        if ( gradientBlur === void 0 ) gradientBlur = 600;\n        if ( start === void 0 ) start = null;\n        if ( end === void 0 ) end = null;\n\n        Filter.call(this, vertex, fragment);\n        this.uniforms.blur = blur;\n        this.uniforms.gradientBlur = gradientBlur;\n        this.uniforms.start = start || new Point(0, window.innerHeight / 2);\n        this.uniforms.end = end || new Point(600, window.innerHeight / 2);\n        this.uniforms.delta = new Point(30, 30);\n        this.uniforms.texSize = new Point(window.innerWidth, window.innerHeight);\n        this.updateDelta();\n    }\n\n    if ( Filter ) TiltShiftAxisFilter.__proto__ = Filter;\n    TiltShiftAxisFilter.prototype = Object.create( Filter && Filter.prototype );\n    TiltShiftAxisFilter.prototype.constructor = TiltShiftAxisFilter;\n\n    var prototypeAccessors = { blur: { configurable: true },gradientBlur: { configurable: true },start: { configurable: true },end: { configurable: true } };\n\n    /**\n     * Updates the filter delta values.\n     * This is overridden in the X and Y filters, does nothing for this class.\n     *\n     */\n    TiltShiftAxisFilter.prototype.updateDelta = function updateDelta () {\n        this.uniforms.delta.x = 0;\n        this.uniforms.delta.y = 0;\n    };\n\n    /**\n     * The strength of the blur.\n     *\n     * @member {number}\n     * @memberof PIXI.filters.TiltShiftAxisFilter#\n     */\n    prototypeAccessors.blur.get = function () {\n        return this.uniforms.blur;\n    };\n    prototypeAccessors.blur.set = function (value) {\n        this.uniforms.blur = value;\n    };\n\n    /**\n     * The strength of the gradient blur.\n     *\n     * @member {number}\n     * @memberof PIXI.filters.TiltShiftAxisFilter#\n     */\n    prototypeAccessors.gradientBlur.get = function () {\n        return this.uniforms.gradientBlur;\n    };\n    prototypeAccessors.gradientBlur.set = function (value) {\n        this.uniforms.gradientBlur = value;\n    };\n\n    /**\n     * The X value to start the effect at.\n     *\n     * @member {PIXI.Point}\n     * @memberof PIXI.filters.TiltShiftAxisFilter#\n     */\n    prototypeAccessors.start.get = function () {\n        return this.uniforms.start;\n    };\n    prototypeAccessors.start.set = function (value) {\n        this.uniforms.start = value;\n        this.updateDelta();\n    };\n\n    /**\n     * The X value to end the effect at.\n     *\n     * @member {PIXI.Point}\n     * @memberof PIXI.filters.TiltShiftAxisFilter#\n     */\n    prototypeAccessors.end.get = function () {\n        return this.uniforms.end;\n    };\n    prototypeAccessors.end.set = function (value) {\n        this.uniforms.end = value;\n        this.updateDelta();\n    };\n\n    Object.defineProperties( TiltShiftAxisFilter.prototype, prototypeAccessors );\n\n    return TiltShiftAxisFilter;\n}(Filter));\n\n/**\n * @author Vico @vicocotea\n * original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js by Evan Wallace : http://madebyevan.com/\n */\n\n/**\n * A TiltShiftXFilter.\n *\n * @class\n * @extends PIXI.TiltShiftAxisFilter\n * @memberof PIXI.filters\n * @private\n */\nvar TiltShiftXFilter = /*@__PURE__*/(function (TiltShiftAxisFilter) {\n    function TiltShiftXFilter () {\n        TiltShiftAxisFilter.apply(this, arguments);\n    }\n\n    if ( TiltShiftAxisFilter ) TiltShiftXFilter.__proto__ = TiltShiftAxisFilter;\n    TiltShiftXFilter.prototype = Object.create( TiltShiftAxisFilter && TiltShiftAxisFilter.prototype );\n    TiltShiftXFilter.prototype.constructor = TiltShiftXFilter;\n\n    TiltShiftXFilter.prototype.updateDelta = function updateDelta () {\n        var dx = this.uniforms.end.x - this.uniforms.start.x;\n        var dy = this.uniforms.end.y - this.uniforms.start.y;\n        var d = Math.sqrt(dx * dx + dy * dy);\n        this.uniforms.delta.x = dx / d;\n        this.uniforms.delta.y = dy / d;\n    };\n\n    return TiltShiftXFilter;\n}(TiltShiftAxisFilter));\n\n/**\n * @author Vico @vicocotea\n * original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js by Evan Wallace : http://madebyevan.com/\n */\n\n/**\n * A TiltShiftYFilter.\n *\n * @class\n * @extends PIXI.TiltShiftAxisFilter\n * @memberof PIXI.filters\n * @private\n */\nvar TiltShiftYFilter = /*@__PURE__*/(function (TiltShiftAxisFilter) {\n    function TiltShiftYFilter () {\n        TiltShiftAxisFilter.apply(this, arguments);\n    }\n\n    if ( TiltShiftAxisFilter ) TiltShiftYFilter.__proto__ = TiltShiftAxisFilter;\n    TiltShiftYFilter.prototype = Object.create( TiltShiftAxisFilter && TiltShiftAxisFilter.prototype );\n    TiltShiftYFilter.prototype.constructor = TiltShiftYFilter;\n\n    TiltShiftYFilter.prototype.updateDelta = function updateDelta () {\n        var dx = this.uniforms.end.x - this.uniforms.start.x;\n        var dy = this.uniforms.end.y - this.uniforms.start.y;\n        var d = Math.sqrt(dx * dx + dy * dy);\n        this.uniforms.delta.x = -dy / d;\n        this.uniforms.delta.y = dx / d;\n    };\n\n    return TiltShiftYFilter;\n}(TiltShiftAxisFilter));\n\n/**\n * @author Vico @vicocotea\n * original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js by Evan Wallace : http://madebyevan.com/\n */\n\n/**\n * A TiltShift Filter. Manages the pass of both a TiltShiftXFilter and TiltShiftYFilter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/tilt-shift.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-tilt-shift|@pixi/filter-tilt-shift}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {number} [blur=100] The strength of the blur.\n * @param {number} [gradientBlur=600] The strength of the gradient blur.\n * @param {PIXI.Point} [start=null] The Y value to start the effect at.\n * @param {PIXI.Point} [end=null] The Y value to end the effect at.\n */\nvar TiltShiftFilter = /*@__PURE__*/(function (Filter) {\n    function TiltShiftFilter(blur, gradientBlur, start, end) {\n        if ( blur === void 0 ) blur = 100;\n        if ( gradientBlur === void 0 ) gradientBlur = 600;\n        if ( start === void 0 ) start = null;\n        if ( end === void 0 ) end = null;\n\n        Filter.call(this);\n        this.tiltShiftXFilter = new TiltShiftXFilter(blur, gradientBlur, start, end);\n        this.tiltShiftYFilter = new TiltShiftYFilter(blur, gradientBlur, start, end);\n    }\n\n    if ( Filter ) TiltShiftFilter.__proto__ = Filter;\n    TiltShiftFilter.prototype = Object.create( Filter && Filter.prototype );\n    TiltShiftFilter.prototype.constructor = TiltShiftFilter;\n\n    var prototypeAccessors = { blur: { configurable: true },gradientBlur: { configurable: true },start: { configurable: true },end: { configurable: true } };\n\n    TiltShiftFilter.prototype.apply = function apply (filterManager, input, output) {\n        var renderTarget = filterManager.getFilterTexture();\n        this.tiltShiftXFilter.apply(filterManager, input, renderTarget);\n        this.tiltShiftYFilter.apply(filterManager, renderTarget, output);\n        filterManager.returnFilterTexture(renderTarget);\n    };\n\n    /**\n     * The strength of the blur.\n     *\n     * @member {number}\n     */\n    prototypeAccessors.blur.get = function () {\n        return this.tiltShiftXFilter.blur;\n    };\n    prototypeAccessors.blur.set = function (value) {\n        this.tiltShiftXFilter.blur = this.tiltShiftYFilter.blur = value;\n    };\n\n    /**\n     * The strength of the gradient blur.\n     *\n     * @member {number}\n     */\n    prototypeAccessors.gradientBlur.get = function () {\n        return this.tiltShiftXFilter.gradientBlur;\n    };\n    prototypeAccessors.gradientBlur.set = function (value) {\n        this.tiltShiftXFilter.gradientBlur = this.tiltShiftYFilter.gradientBlur = value;\n    };\n\n    /**\n     * The Y value to start the effect at.\n     *\n     * @member {PIXI.Point}\n     */\n    prototypeAccessors.start.get = function () {\n        return this.tiltShiftXFilter.start;\n    };\n    prototypeAccessors.start.set = function (value) {\n        this.tiltShiftXFilter.start = this.tiltShiftYFilter.start = value;\n    };\n\n    /**\n     * The Y value to end the effect at.\n     *\n     * @member {PIXI.Point}\n     */\n    prototypeAccessors.end.get = function () {\n        return this.tiltShiftXFilter.end;\n    };\n    prototypeAccessors.end.set = function (value) {\n        this.tiltShiftXFilter.end = this.tiltShiftYFilter.end = value;\n    };\n\n    Object.defineProperties( TiltShiftFilter.prototype, prototypeAccessors );\n\n    return TiltShiftFilter;\n}(Filter));\n\nexport { TiltShiftAxisFilter, TiltShiftFilter, TiltShiftXFilter, TiltShiftYFilter };\n//# sourceMappingURL=filter-tilt-shift.esm.js.map\n","/*!\n * @pixi/filter-twist - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-twist is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"varying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\nuniform float radius;\\nuniform float angle;\\nuniform vec2 offset;\\nuniform vec4 filterArea;\\n\\nvec2 mapCoord( vec2 coord )\\n{\\n    coord *= filterArea.xy;\\n    coord += filterArea.zw;\\n\\n    return coord;\\n}\\n\\nvec2 unmapCoord( vec2 coord )\\n{\\n    coord -= filterArea.zw;\\n    coord /= filterArea.xy;\\n\\n    return coord;\\n}\\n\\nvec2 twist(vec2 coord)\\n{\\n    coord -= offset;\\n\\n    float dist = length(coord);\\n\\n    if (dist < radius)\\n    {\\n        float ratioDist = (radius - dist) / radius;\\n        float angleMod = ratioDist * ratioDist * angle;\\n        float s = sin(angleMod);\\n        float c = cos(angleMod);\\n        coord = vec2(coord.x * c - coord.y * s, coord.x * s + coord.y * c);\\n    }\\n\\n    coord += offset;\\n\\n    return coord;\\n}\\n\\nvoid main(void)\\n{\\n\\n    vec2 coord = mapCoord(vTextureCoord);\\n\\n    coord = twist(coord);\\n\\n    coord = unmapCoord(coord);\\n\\n    gl_FragColor = texture2D(uSampler, coord );\\n\\n}\\n\";\n\n/**\n * This filter applies a twist effect making display objects appear twisted in the given direction.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/twist.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-twist|@pixi/filter-twist}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {number} [radius=200] The radius of the twist.\n * @param {number} [angle=4] The angle of the twist.\n * @param {number} [padding=20] Padding for filter area.\n */\nvar TwistFilter = /*@__PURE__*/(function (Filter) {\n    function TwistFilter(radius, angle, padding) {\n        if ( radius === void 0 ) radius = 200;\n        if ( angle === void 0 ) angle = 4;\n        if ( padding === void 0 ) padding = 20;\n\n        Filter.call(this, vertex, fragment);\n\n        this.radius = radius;\n        this.angle = angle;\n        this.padding = padding;\n    }\n\n    if ( Filter ) TwistFilter.__proto__ = Filter;\n    TwistFilter.prototype = Object.create( Filter && Filter.prototype );\n    TwistFilter.prototype.constructor = TwistFilter;\n\n    var prototypeAccessors = { offset: { configurable: true },radius: { configurable: true },angle: { configurable: true } };\n\n    /**\n     * This point describes the the offset of the twist.\n     *\n     * @member {PIXI.Point}\n     */\n    prototypeAccessors.offset.get = function () {\n        return this.uniforms.offset;\n    };\n    prototypeAccessors.offset.set = function (value) {\n        this.uniforms.offset = value;\n    };\n\n    /**\n     * The radius of the twist.\n     *\n     * @member {number}\n     */\n    prototypeAccessors.radius.get = function () {\n        return this.uniforms.radius;\n    };\n    prototypeAccessors.radius.set = function (value) {\n        this.uniforms.radius = value;\n    };\n\n    /**\n     * The angle of the twist.\n     *\n     * @member {number}\n     */\n    prototypeAccessors.angle.get = function () {\n        return this.uniforms.angle;\n    };\n    prototypeAccessors.angle.set = function (value) {\n        this.uniforms.angle = value;\n    };\n\n    Object.defineProperties( TwistFilter.prototype, prototypeAccessors );\n\n    return TwistFilter;\n}(Filter));\n\nexport { TwistFilter };\n//# sourceMappingURL=filter-twist.esm.js.map\n","/*!\n * @pixi/filter-zoom-blur - v3.0.3\n * Compiled Wed, 29 May 2019 03:04:05 UTC\n *\n * @pixi/filter-zoom-blur is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\";\n\nvar fragment = \"varying vec2 vTextureCoord;\\nuniform sampler2D uSampler;\\nuniform vec4 filterArea;\\n\\nuniform vec2 uCenter;\\nuniform float uStrength;\\nuniform float uInnerRadius;\\nuniform float uRadius;\\n\\nconst float MAX_KERNEL_SIZE = 32.0;\\n\\n// author: http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/\\nhighp float rand(vec2 co, float seed) {\\n    const highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n    highp float dt = dot(co + seed, vec2(a, b)), sn = mod(dt, 3.14159);\\n    return fract(sin(sn) * c + seed);\\n}\\n\\nvoid main() {\\n\\n    float minGradient = uInnerRadius * 0.3;\\n    float innerRadius = (uInnerRadius + minGradient * 0.5) / filterArea.x;\\n\\n    float gradient = uRadius * 0.3;\\n    float radius = (uRadius - gradient * 0.5) / filterArea.x;\\n\\n    float countLimit = MAX_KERNEL_SIZE;\\n\\n    vec2 dir = vec2(uCenter.xy / filterArea.xy - vTextureCoord);\\n    float dist = length(vec2(dir.x, dir.y * filterArea.y / filterArea.x));\\n\\n    float strength = uStrength;\\n\\n    float delta = 0.0;\\n    float gap;\\n    if (dist < innerRadius) {\\n        delta = innerRadius - dist;\\n        gap = minGradient;\\n    } else if (radius >= 0.0 && dist > radius) { // radius < 0 means it's infinity\\n        delta = dist - radius;\\n        gap = gradient;\\n    }\\n\\n    if (delta > 0.0) {\\n        float normalCount = gap / filterArea.x;\\n        delta = (normalCount - delta) / normalCount;\\n        countLimit *= delta;\\n        strength *= delta;\\n        if (countLimit < 1.0)\\n        {\\n            gl_FragColor = texture2D(uSampler, vTextureCoord);\\n            return;\\n        }\\n    }\\n\\n    // randomize the lookup values to hide the fixed number of samples\\n    float offset = rand(vTextureCoord, 0.0);\\n\\n    float total = 0.0;\\n    vec4 color = vec4(0.0);\\n\\n    dir *= strength;\\n\\n    for (float t = 0.0; t < MAX_KERNEL_SIZE; t++) {\\n        float percent = (t + offset) / MAX_KERNEL_SIZE;\\n        float weight = 4.0 * (percent - percent * percent);\\n        vec2 p = vTextureCoord + dir * percent;\\n        vec4 sample = texture2D(uSampler, p);\\n\\n        // switch to pre-multiplied alpha to correctly blur transparent images\\n        // sample.rgb *= sample.a;\\n\\n        color += sample * weight;\\n        total += weight;\\n\\n        if (t > countLimit){\\n            break;\\n        }\\n    }\\n\\n    color /= total;\\n    // switch back from pre-multiplied alpha\\n    // color.rgb /= color.a + 0.00001;\\n\\n    gl_FragColor = color;\\n}\\n\";\n\n/**\n * The ZoomFilter applies a Zoom blur to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/zoom-blur.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-zoom-blur|@pixi/filter-zoom-blur}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {number} [strength=0.1] Sets the strength of the zoom blur effect\n * @param {PIXI.Point|number[]} [center=[0,0]] The center of the zoom.\n * @param {number} [innerRadius=0] The inner radius of zoom. The part in inner circle won't apply zoom blur effect.\n * @param {number} [radius=-1] See `radius` property.\n */\nvar ZoomBlurFilter = /*@__PURE__*/(function (Filter) {\n    function ZoomBlurFilter(strength, center, innerRadius, radius) {\n        if ( strength === void 0 ) strength = 0.1;\n        if ( center === void 0 ) center = [0, 0];\n        if ( innerRadius === void 0 ) innerRadius = 0;\n        if ( radius === void 0 ) radius = -1;\n\n        Filter.call(this, vertex, fragment);\n\n        this.center = center;\n        this.strength = strength;\n        this.innerRadius = innerRadius;\n        this.radius = radius;\n    }\n\n    if ( Filter ) ZoomBlurFilter.__proto__ = Filter;\n    ZoomBlurFilter.prototype = Object.create( Filter && Filter.prototype );\n    ZoomBlurFilter.prototype.constructor = ZoomBlurFilter;\n\n    var prototypeAccessors = { center: { configurable: true },strength: { configurable: true },innerRadius: { configurable: true },radius: { configurable: true } };\n\n    /**\n     * Center of the effect.\n     *\n     * @member {PIXI.Point|number[]}\n     * @default [0, 0]\n     */\n    prototypeAccessors.center.get = function () {\n        return this.uniforms.uCenter;\n    };\n    prototypeAccessors.center.set = function (value) {\n        this.uniforms.uCenter = value;\n    };\n\n    /**\n     * Intensity of the zoom effect.\n     *\n     * @member {number}\n     * @default 0.1\n     */\n    prototypeAccessors.strength.get = function () {\n        return this.uniforms.uStrength;\n    };\n    prototypeAccessors.strength.set = function (value) {\n        this.uniforms.uStrength = value;\n    };\n\n    /**\n     * Radius of the inner region not effected by blur.\n     *\n     * @member {number}\n     * @default 0\n     */\n    prototypeAccessors.innerRadius.get = function () {\n        return this.uniforms.uInnerRadius;\n    };\n    prototypeAccessors.innerRadius.set = function (value) {\n        this.uniforms.uInnerRadius = value;\n    };\n\n    /**\n     * Outer radius of the effect. The default value is `-1`.\n     * `< 0.0` means it's infinity.\n     *\n     * @member {number}\n     * @default -1\n     */\n    prototypeAccessors.radius.get = function () {\n        return this.uniforms.uRadius;\n    };\n    prototypeAccessors.radius.set = function (value) {\n        if (value < 0 || value === Infinity) {\n            value = -1;\n        }\n        this.uniforms.uRadius = value;\n    };\n\n    Object.defineProperties( ZoomBlurFilter.prototype, prototypeAccessors );\n\n    return ZoomBlurFilter;\n}(Filter));\n\nexport { ZoomBlurFilter };\n//# sourceMappingURL=filter-zoom-blur.esm.js.map\n"],"names":["vertex","fragment","AdjustmentFilter","Filter","options","call","this","Object","assign","gamma","saturation","contrast","brightness","red","green","blue","alpha","__proto__","prototype","create","constructor","apply","filterManager","input","output","clear","uniforms","Math","max","applyFilter","fragmentClamp","KawaseBlurFilter","blur","quality","clamp","uOffset","Float32Array","_pixelSize","Point","pixelSize","_clamp","_kernels","Array","isArray","kernels","_blur","prototypeAccessors","configurable","offset","uvX","x","_frame","width","uvY","y","height","_quality","tmp","renderTarget","getFilterTexture","source","target","last","i","returnFilterTexture","_generateKernels","k","step","push","get","set","value","length","round","defineProperties","ExtractBrightnessFilter","threshold","fragment$1","AdvancedBloomFilter","bloomScale","resolution","settings","RESOLUTION","_extractFilter","_blurFilter","currentState","brightTarget","bloomTarget","bloomTexture","_resolution","AsciiFilter","size","BevelFilter","lightColor","shadowColor","rotation","thickness","lightAlpha","shadowAlpha","_updateTransform","transformX","_thickness","cos","_angle","transformY","sin","DEG_TO_RAD","rgb2hex","hex2rgb","BloomFilter","kernelSize","blurX","blurY","blurXFilter","BlurFilterPass","blurYFilter","blendMode","BLEND_MODES","SCREEN","defaultFilter","AlphaFilter","BulgePinchFilter","center","radius","strength","dimensions","filterFrame","ColorMapFilter","colorMap","nearest","mix","_size","_sliceSize","_slicePixelSize","_sliceInnerSize","_scaleMode","_nearest","colorSize","_mix","_colorMap","Texture","from","baseTexture","scaleMode","mipmap","SCALE_MODES","NEAREST","LINEAR","texture","_glTextures","_updateID","emit","updateColorMap","destroy","destroyBase","ColorReplaceFilter","originalColor","newColor","epsilon","arr","_originalColor","_newColor","ConvolutionFilter","matrix","texelSize","undefined","this$1","forEach","v","CrossHatchFilter","CRTFilter","time","seed","curvature","lineWidth","lineContrast","verticalLine","noise","noiseSize","vignetting","vignettingAlpha","vignettingBlur","DotFilter","scale","angle","DropShadowFilter","console","warn","arguments","distance","color","shadowOnly","_tintFilter","shift","_updatePadding","padding","_updateShift","_distance","EmbossFilter","GlitchFilter","slices","direction","fillMode","average","minSize","sampleSize","_canvas","document","createElement","_slices","sizes","offsets","aspect","_randomizeSizes","_sizes","min","count","rest","averageWidth","w","random","rest$1","ratio","sqrt","i$1","w$1","shuffle","rand","temp","_randomizeOffsets","_offsets","refresh","redraw","ctx","getContext","clearRect","floor","fillStyle","fillRect","update","displacementMap","len","slicesWidth","slicesOffset","_direction","radians","sinDir","cosDir","TRANSPARENT","ORIGINAL","LOOP","CLAMP","MIRROR","GlowFilter","outerStrength","innerStrength","replace","toFixed","glowColor","perlin","GodrayFilter","gain","lacunarity","parallel","_angleLight","ref","light","MotionBlurFilter","velocity","uVelocity","_velocity","ObservablePoint","velocityChanged","uKernelSize","copy","MultiColorReplaceFilter","replacements","maxColors","_maxColors","_replacements","originalColors","targetColors","originals","targets","colorCount","pair","targetColor","OldFilmFilter","sepia","scratch","scratchDensity","scratchWidth","OutlineFilter","samples","MAX_SAMPLES","MIN_SAMPLES","angleStep","PI","outlineColor","PixelateFilter","RadialBlurFilter","uRadian","uCenter","uRadius","Infinity","ReflectionFilter","amplitude","waveLength","mirror","boundary","RGBSplitFilter","ShockwaveFilter","wavelength","speed","SimpleLightmapFilter","ambientColor","uLightmap","_color","TiltShiftAxisFilter","gradientBlur","start","end","window","innerHeight","delta","texSize","innerWidth","updateDelta","TiltShiftXFilter","dx","dy","d","TiltShiftYFilter","TiltShiftFilter","tiltShiftXFilter","tiltShiftYFilter","TwistFilter","ZoomBlurFilter","innerRadius","uStrength","uInnerRadius"],"mappings":"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"}